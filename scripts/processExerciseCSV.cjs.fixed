const fs = require('fs');
const path = require('path');
const csv = require('csv-parser');

// Paths
const csvFilePath = path.join(__dirname, '../Ã˜velsesdatabase.csv');
const jsonOutputPath = path.join(__dirname, '../src/data/generatedExercises.json');
const tsOutputPath = path.join(__dirname, '../src/data/importedExercises.ts');

// Category mapping helper function
function mapCategory(type, bodyPart, kategori) {
  const typeStr = String(type || '').toLowerCase();
  const bodyPartStr = String(bodyPart || '').toLowerCase();
  const kategoriStr = String(kategori || '').toLowerCase();

  // Map to existing categories from your app
  if (typeStr.includes('cardio')) return 'cardio';
  if (typeStr.includes('plyometric')) return 'power';
  if (typeStr.includes('stretch')) return 'stretching';
  
  // Map based on primary muscle groups
  if (bodyPartStr.includes('chest')) return 'compound';
  if (bodyPartStr.includes('back')) return 'compound';
  if (bodyPartStr.includes('quadriceps') || bodyPartStr.includes('glutes') || bodyPartStr.includes('legs')) return 'compound';
  if (bodyPartStr.includes('shoulders')) return 'compound';
  if (bodyPartStr.includes('triceps') || bodyPartStr.includes('biceps') || bodyPartStr.includes('arms')) return 'isolation';
  if (bodyPartStr.includes('abdominals') || bodyPartStr.includes('core')) return 'isolation';
  
  // Default to compound if we can't determine
  return 'compound';
}

// Type mapping helper function
function mapType(type, equipment) {
  const typeStr = String(type || '').toLowerCase();
  const equipmentStr = String(equipment || '').toLowerCase();
  
  if (typeStr.includes('cardio')) return 'cardio';
  if (typeStr.includes('stretch')) return 'flexibility';
  if (equipmentStr.includes('body only') || equipmentStr.includes('bodyweight')) return 'bodyweight';
  
  return 'strength'; // Default
}

// Fix CSV line breaks and quotes
function fixCSVContent(csvContent) {
  // Replace escaped quotes (double double-quotes) with a temporary marker
  let fixed = csvContent.replace(/""/g, '||QUOTE||');
  
  // Fix lines where a newline appears inside a quoted field
  let inQuote = false;
  let result = '';
  
  for (let i = 0; i < fixed.length; i++) {
    const char = fixed[i];
    
    if (char === '"') {
      inQuote = !inQuote;
    }
    
    // Replace actual newlines inside quotes with a placeholder
    if (inQuote && (char === '\n' || char === '\r')) {
      result += ' ';
    } else {
      result += char;
    }
  }
  
  // Put the escaped quotes back
  result = result.replace(/\|\|QUOTE\|\|/g, '"');
  
  return result;
}

// Process CSV function
function processCSV() {
  console.log(`Reading CSV file: ${csvFilePath}`);
  
  // Read the entire file and fix it first
  const csvContent = fs.readFileSync(csvFilePath, 'utf8');
  const fixedCSVContent = fixCSVContent(csvContent);
  
  // Write the fixed CSV to a temporary file
  const tempCSVPath = path.join(__dirname, '../temp-fixed.csv');
  fs.writeFileSync(tempCSVPath, fixedCSVContent, 'utf8');
  
  const results = [];
  
  // CSV parsing stream
  fs.createReadStream(tempCSVPath)
    .pipe(csv())
    .on('data', (data) => {
      // Check if this is a valid row with required fields
      if (!data.Title) {
        return; // Skip empty rows
      }
      
      // Parse primary muscles from BodyPart
      const primaryMuscles = data.BodyPart ? 
        data.BodyPart.split(',').map(muscle => muscle.trim()) : 
        [];
      
      // Parse equipment
      const equipment = data.Equipment ? 
        [data.Equipment.trim()] : 
        ['None'];
      
      // Create exercise object with mapped categories
      const exercise = {
        id: data['Unnamed: 0'] || String(results.length + 1),
        name: data.Title,
        description: data.Desc || '',
        type: data.Type || 'Strength',
        primaryMuscles: primaryMuscles,
        equipment: equipment,
        category: data.Kategori || 'Styrke',
        laterality: data.Lateralitet || 'Bilateral',
        instructions: [],
        tips: [],
        videoUrl: '',
        imageUrl: '',
      };
      
      // Map to app-specific categories and types
      exercise.category = mapCategory(exercise.type, primaryMuscles.join(', '), exercise.category);
      exercise.type = mapType(exercise.type, equipment.join(','));
      
      results.push(exercise);
    })
    .on('end', () => {
      console.log(`Processed ${results.length} exercises from CSV`);
      
      // Check for any issues
      const missingCategoryCount = results.filter(ex => !ex.category).length;
      const missingTypeCount = results.filter(ex => !ex.type).length;
      
      if (missingCategoryCount > 0) {
        console.warn(`Warning: ${missingCategoryCount} exercises have no category`);
      }
      
      if (missingTypeCount > 0) {
        console.warn(`Warning: ${missingTypeCount} exercises have no type`);
      }
      
      // Write to JSON file
      fs.writeFileSync(
        jsonOutputPath,
        JSON.stringify(results, null, 2),
        'utf8'
      );
      console.log(`JSON data written to: ${jsonOutputPath}`);
      
      // Write to TypeScript file
      const tsContent = `// Auto-generated from CSV on ${new Date().toISOString()}
import { Exercise } from '../types/Exercise';

export const importedExercises: Exercise[] = ${JSON.stringify(results, null, 2)};
`;
      
      fs.writeFileSync(tsOutputPath, tsContent, 'utf8');
      console.log(`TypeScript data written to: ${tsOutputPath}`);
      
      // Clean up temp file
      fs.unlinkSync(tempCSVPath);
      
      console.log('Process completed successfully!');
    });
}

// Install csv-parser if not already installed
try {
  require.resolve('csv-parser');
  console.log('csv-parser is already installed. Processing CSV...');
  processCSV();
} catch (e) {
  console.log('csv-parser not found. Installing...');
  const { execSync } = require('child_process');
  try {
    execSync('npm install csv-parser', { stdio: 'inherit' });
    console.log('csv-parser installed successfully. Processing CSV...');
    processCSV();
  } catch (err) {
    console.error('Failed to install csv-parser:', err);
    console.log('Please run: npm install csv-parser');
  }
}
