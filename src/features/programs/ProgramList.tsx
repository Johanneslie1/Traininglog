import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { usePrograms } from '@/context/ProgramsContext';
import ProgramModal from './ProgramModal';
import { getAuth } from 'firebase/auth';
import { Program } from '@/types/program';
import { ErrorBoundary } from '@/components/ErrorBoundary';
import { TrashIcon } from '@heroicons/react/outline';

const levelColors: Record<string, string> = {
  Any: 'bg-gray-500',
  Beginner: 'bg-green-600',
  Intermediate: 'bg-yellow-600',
  Advanced: 'bg-red-600',
};

const ProgramListContent: React.FC<{ onSelect?: (id: string) => void }> = ({ onSelect }) => {
  const navigate = useNavigate();
  const { programs, addProgram: create, refresh, deleteProgram } = usePrograms();
  const [showModal, setShowModal] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [deletingProgramId, setDeletingProgramId] = useState<string | null>(null);
  const auth = getAuth();

  useEffect(() => {
    if (auth.currentUser) {
      try {
        refresh();
      } catch (error) {
        console.error('Error refreshing programs:', error);
        setError('Failed to load programs');
      }
    }
  }, [auth.currentUser, refresh]);

  const handleAdd = async (data: { name: string; level: string; description: string }) => {
    setError(null);
    const user = auth.currentUser;
    if (!user) {
      setError('You must be logged in to create a program');
      return;
    }

    // Create program without fields that will be generated by backend
    const newProgram = {
      name: data.name,
      description: data.description || '',
      level: data.level.toLowerCase() as 'beginner' | 'intermediate' | 'advanced',
      createdBy: user.uid,
      sessions: [],
      isPublic: false,
      tags: [],
      // Backend will generate these fields
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    } as Omit<Program, 'id' | 'userId'>;

    console.log('[ProgramList] Creating new program:', newProgram);
    
    try {
      await create(newProgram);
      console.log('[ProgramList] Program created successfully');
      setShowModal(false);
      // Wait for programs to refresh and get the new program
      await refresh();
      // Find the newly created program
      const createdProgram = programs.find(p => 
        p.name === data.name && 
        p.userId === user.uid &&
        p.createdBy === user.uid
      );
      if (createdProgram) {
        navigate(`/programs/${createdProgram.id}`);
      } else {
        // If we can't find it immediately, just stay on programs list
        console.log('[ProgramList] Created program not found in list, staying on programs page');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to create program';
      console.error('[ProgramList] Error in handleAdd:', err);
      setError(errorMessage);
    }
  };

  const handleDeleteProgram = async (programId: string, programName: string, event: React.MouseEvent) => {
    event.stopPropagation(); // Prevent card click navigation
    
    if (window.confirm(`Are you sure you want to delete the program "${programName}"? This action cannot be undone.`)) {
      setDeletingProgramId(programId);
      setError(null);
      
      try {
        console.log('[ProgramList] Deleting program:', programId);
        await deleteProgram(programId);
        console.log('[ProgramList] Program deleted successfully');
        // Refresh the programs list
        await refresh();
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to delete program';
        console.error('[ProgramList] Error deleting program:', err);
        setError(errorMessage);
      } finally {
        setDeletingProgramId(null);
      }
    }
  };

  return (
    <div className="relative min-h-screen pb-20">
      <h2 className="text-xl font-bold mb-4">Programs</h2>
      {error && (
        <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
          {error}
        </div>
      )}
      {programs.length === 0 ? (
        <div className="text-center p-8 text-gray-500">
          No programs found. Click the + button to create one.
        </div>
      ) : (
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
          {programs.map((program: Program) => (
            <div
              key={program.id}
              className="relative bg-[#23272F] rounded-xl p-4 flex flex-col items-start justify-between min-h-[120px] shadow-md cursor-pointer overflow-hidden group"
              onClick={() => (onSelect ? onSelect(program.id) : navigate(`/programs/${program.id}`))}
            >
              <div className="absolute right-3 top-3 opacity-20 text-5xl pointer-events-none select-none">
                <span role="img" aria-label="kettlebell">üèãÔ∏è‚Äç‚ôÇÔ∏è</span>
              </div>
              
              {/* Delete button */}
              <button
                onClick={(e) => handleDeleteProgram(program.id, program.name, e)}
                disabled={deletingProgramId === program.id}
                className="absolute top-2 left-2 p-1.5 bg-red-600/80 hover:bg-red-500 text-white rounded-lg opacity-0 group-hover:opacity-100 transition-all duration-200 z-20 disabled:opacity-50 disabled:cursor-not-allowed"
                title="Delete program"
                aria-label={`Delete program ${program.name}`}
              >
                {deletingProgramId === program.id ? (
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                ) : (
                  <TrashIcon className="w-4 h-4" />
                )}
              </button>

              <div className="font-semibold text-lg text-white mb-1 z-10">{program.name}</div>
              <div className="flex items-center gap-2 z-10">
                <span className={`px-2 py-0.5 rounded text-xs text-white ${levelColors[program.level.charAt(0).toUpperCase() + program.level.slice(1)] || 'bg-gray-700'}`}>
                  {program.level.charAt(0).toUpperCase() + program.level.slice(1)}
                </span>
                {program.sessions && program.sessions.length > 0 && (
                  <span className="text-gray-400 text-xs">
                    {program.sessions.length} session{program.sessions.length !== 1 ? 's' : ''}
                  </span>
                )}
              </div>
              {program.description && (
                <div className="text-gray-400 text-xs mt-2 z-10 line-clamp-2">{program.description}</div>
              )}
            </div>
          ))}
        </div>
      )}
      <button
        className="fixed bottom-6 right-6 bg-blue-600 hover:bg-blue-500 text-white rounded-full w-14 h-14 flex items-center justify-center text-3xl shadow-lg z-50"
        onClick={() => setShowModal(true)}
        aria-label="Add Program"
      >
        +
      </button>
      <ProgramModal 
        isOpen={showModal} 
        onClose={() => {
          setShowModal(false);
          setError(null);
        }} 
        onSave={handleAdd} 
      />
    </div>
  );
};

const ProgramList: React.FC<{ onSelect?: (id: string) => void }> = (props) => {
  return (
    <ErrorBoundary fallback={<div className="text-white p-4">Error loading programs. Please try again.</div>}>
      <ProgramListContent {...props} />
    </ErrorBoundary>
  );
};

export default ProgramList;
