import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { usePrograms } from '@/context/ProgramsContext';
import ProgramModal from './ProgramModal';
import CreateNewProgram from './CreateNewProgram';
import { getAuth } from 'firebase/auth';
import { Program } from '@/types/program';
import { ErrorBoundary } from '@/components/ErrorBoundary';
import { TrashIcon, PlusIcon } from '@heroicons/react/outline';

const ProgramListContent: React.FC<{ onSelect?: (id: string) => void }> = ({ onSelect }) => {
  const navigate = useNavigate();
  const { programs, addProgram: create, refresh, deleteProgram } = usePrograms();
  const [showModal, setShowModal] = useState(false);
  const [showCreateNew, setShowCreateNew] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [deletingProgramId, setDeletingProgramId] = useState<string | null>(null);
  const auth = getAuth();

  // No need for useEffect to refresh - ProgramsContext handles this automatically

  const handleAdd = async (data: { name: string; description: string }) => {
    setError(null);
    const user = auth.currentUser;
    if (!user) {
      setError('You must be logged in to create a program');
      return;
    }

    // Create program without fields that will be generated by backend
    const newProgram = {
      name: data.name,
      description: data.description || '',
      createdBy: user.uid,
      sessions: [],
      isPublic: false,
      tags: [],
      // Backend will generate these fields
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    } as Omit<Program, 'id' | 'userId'>;

    console.log('[ProgramList] Creating new program:', newProgram);
    
    try {
      await create(newProgram);
      console.log('[ProgramList] Program created successfully');
      setShowModal(false);
      // Wait for programs to refresh and get the new program
      await refresh();
      // Find the newly created program
      const createdProgram = programs.find(p => 
        p.name === data.name && 
        p.userId === user.uid &&
        p.createdBy === user.uid
      );
      if (createdProgram) {
        navigate(`/programs/${createdProgram.id}`);
      } else {
        // If we can't find it immediately, just stay on programs list
        console.log('[ProgramList] Created program not found in list, staying on programs page');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to create program';
      console.error('[ProgramList] Error in handleAdd:', err);
      setError(errorMessage);
    }
  };

  const handleCreateNewSave = async (program: Omit<Program, 'id' | 'userId'>) => {
    try {
      console.log('[ProgramList] Creating new program:', program);
      await create(program);
      setShowCreateNew(false);
      await refresh();
      
      // Navigate to the newly created program
      const createdProgram = programs.find(p => 
        p.name === program.name && 
        p.userId === auth.currentUser?.uid &&
        p.createdBy === auth.currentUser?.uid
      );
      if (createdProgram) {
        navigate(`/programs/${createdProgram.id}`);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to create program';
      console.error('Error creating program:', err);
      setError(errorMessage);
    }
  };

  const handleDeleteProgram = async (programId: string, programName: string, event: React.MouseEvent) => {
    event.stopPropagation(); // Prevent card click navigation
    
    if (window.confirm(`Are you sure you want to delete the program "${programName}"? This action cannot be undone.`)) {
      setDeletingProgramId(programId);
      setError(null);
      
      try {
        console.log('[ProgramList] Deleting program:', programId);
        await deleteProgram(programId);
        console.log('[ProgramList] Program deleted successfully');
        // Refresh the programs list
        await refresh();
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to delete program';
        console.error('[ProgramList] Error deleting program:', err);
        setError(errorMessage);
      } finally {
        setDeletingProgramId(null);
      }
    }
  };

  return (
    <div className="min-h-screen bg-black/90">
      {/* Header */}
      <header className="sticky top-0 bg-[#1a1a1a] border-b border-white/10 p-4">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold text-white">Programs</h2>
          <button
            onClick={() => setShowCreateNew(true)}
            className="px-4 py-2.5 bg-gradient-to-r from-[#8B5CF6] to-[#7C3AED] text-white rounded-xl hover:from-[#7C3AED] hover:to-[#6D28D9] transition-all duration-200 flex items-center gap-2 font-medium shadow-lg"
          >
            <PlusIcon className="w-4 h-4" />
            Create Program
          </button>
        </div>
      </header>

      {/* Main Content */}
      <main className="p-4">
      {error && (
        <div className="mb-4 p-4 bg-red-500/10 border border-red-500/20 text-red-400 rounded-xl">
          {error}
        </div>
      )}
      {programs.length === 0 ? (
        <div className="text-center py-16">
          <div className="w-20 h-20 mx-auto mb-6 rounded-2xl bg-gray-800/50 flex items-center justify-center">
            <svg className="w-10 h-10 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
          </div>
          <h3 className="text-xl font-medium text-white mb-3">No programs yet</h3>
          <p className="text-gray-400 text-sm mb-8">Create your first training program to get started</p>
          <button
            onClick={() => setShowCreateNew(true)}
            className="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-medium shadow-lg"
          >
            Create Program
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {programs.map((program: Program) => (
            <div
              key={program.id}
              className="relative bg-[#1a1a1a] rounded-2xl p-5 flex flex-col justify-between min-h-[140px] cursor-pointer overflow-hidden group border border-gray-800 hover:border-gray-700 transition-all duration-200 hover:shadow-xl"
              onClick={() => (onSelect ? onSelect(program.id) : navigate(`/programs/${program.id}`))}
            >
              <div className="absolute right-4 top-4 opacity-10 text-4xl pointer-events-none select-none">
                <span role="img" aria-label="kettlebell">üèãÔ∏è‚Äç‚ôÇÔ∏è</span>
              </div>
              
              {/* Delete button */}
              <button
                onClick={(e) => handleDeleteProgram(program.id, program.name, e)}
                disabled={deletingProgramId === program.id}
                className="absolute top-3 left-3 p-2 bg-red-600/90 hover:bg-red-500 text-white rounded-xl opacity-0 group-hover:opacity-100 transition-all duration-200 z-20 disabled:opacity-50 disabled:cursor-not-allowed"
                title="Delete program"
                aria-label={`Delete program ${program.name}`}
              >
                {deletingProgramId === program.id ? (
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                ) : (
                  <TrashIcon className="w-4 h-4" />
                )}
              </button>

              <div className="flex flex-col justify-between h-full z-10">
                <div>
                  <h3 className="font-semibold text-lg text-white mb-2">{program.name}</h3>
                  {program.description && (
                    <p className="text-sm text-gray-400 mb-3 line-clamp-2">{program.description}</p>
                  )}
                </div>
                
                <div className="flex items-center justify-between">
                  {program.sessions && program.sessions.length > 0 && (
                    <span className="text-gray-400 text-xs font-medium">
                      {program.sessions.length} session{program.sessions.length !== 1 ? 's' : ''}
                    </span>
                  )}
                </div>
              </div>
              {program.description && (
                <div className="text-gray-400 text-xs mt-2 z-10 line-clamp-2">{program.description}</div>
              )}
            </div>
          ))}
        </div>
      )}
      <button
        className="fixed bottom-6 right-6 bg-blue-600 hover:bg-blue-500 text-white rounded-full w-14 h-14 flex items-center justify-center text-3xl shadow-lg z-50"
        onClick={() => setShowModal(true)}
        aria-label="Add Program"
      >
        +
      </button>
      </main>
      
      <ProgramModal 
        isOpen={showModal} 
        onClose={() => {
          setShowModal(false);
          setError(null);
        }} 
        onSave={handleAdd} 
      />
      
      {showCreateNew && (
        <CreateNewProgram
          onClose={() => setShowCreateNew(false)}
          onSave={handleCreateNewSave}
        />
      )}
    </div>
  );
};

const ProgramList: React.FC<{ onSelect?: (id: string) => void }> = (props) => {
  return (
    <ErrorBoundary fallback={<div className="text-white p-4">Error loading programs. Please try again.</div>}>
      <ProgramListContent {...props} />
    </ErrorBoundary>
  );
};

export default ProgramList;
