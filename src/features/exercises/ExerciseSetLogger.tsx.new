import React, { useState } from 'react';
import { Exercise, ExerciseSet, DifficultyCategory } from '@/types/exercise';
import { SetEditorDialog } from '@/components/SetEditorDialog';

interface ExerciseSetLoggerProps {
  exercise: Partial<Exercise> & { 
    id: string; 
    name: string;
    sets?: ExerciseSet[];
  };
  onSave: (sets: ExerciseSet[], exerciseId: string) => void;
  onCancel: () => void;
  isEditing?: boolean;
}

export const ExerciseSetLogger: React.FC<ExerciseSetLoggerProps> = ({
  exercise,
  onSave,
  onCancel,
  isEditing = false
}) => {
  const [sets, setSets] = useState<ExerciseSet[]>(() => {
    if (isEditing && exercise.sets && exercise.sets.length > 0) {
      return exercise.sets;
    }
    return [];
  });
  
  const [isAddingSet, setIsAddingSet] = useState(!isEditing);
  const [editingSetIndex, setEditingSetIndex] = useState<number | null>(null);

  const handleSetSave = (editedSet: ExerciseSet, index?: number) => {
    if (typeof index === 'number') {
      setSets(sets.map((s, i) => i === index ? editedSet : s));
      setEditingSetIndex(null);
    } else {
      setSets([...sets, editedSet]);
    }
    setIsAddingSet(false);
  };

  const handleSetDelete = (index: number) => {
    setSets(sets.filter((_, i) => i !== index));
  };

  const handleDone = () => {
    onSave(sets, exercise.id);
  };

  const renderSetButton = (set: ExerciseSet, index: number) => {
    return (
      <button
        key={index}
        onClick={() => setEditingSetIndex(index)}
        className="w-full px-4 py-3 bg-[#1E1E1E] rounded-lg text-white hover:bg-[#2D2D2D] transition-colors flex items-center justify-between"
      >
        <div className="flex items-center gap-3">
          <span className="text-gray-400">Set {index + 1}</span>
          <span className="font-medium">{set.weight}kg Ã— {set.reps}</span>
        </div>
        <div className="flex items-center gap-3">
          <span className="text-sm text-gray-400">{set.difficulty}</span>
          {isEditing && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleSetDelete(index);
              }}
              className="text-red-500 hover:text-red-600 p-1"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          )}
        </div>
      </button>
    );
  };

  return (
    <div className="p-4 bg-[#121212] rounded-lg shadow-xl space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-xl font-semibold text-white">{exercise.name}</h3>
        <div className="flex gap-2">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-gray-400 hover:text-white transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={handleDone}
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            disabled={sets.length === 0}
          >
            Save
          </button>
        </div>
      </div>

      {/* Sets List */}
      <div className="space-y-3">
        {sets.map((set, index) => renderSetButton(set, index))}
      </div>

      {/* Add Set Button */}
      <button
        onClick={() => setIsAddingSet(true)}
        className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
      >
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        Add Set
      </button>

      {/* Set Editor Dialog */}
      {(isAddingSet || editingSetIndex !== null) && (
        <SetEditorDialog
          isOpen={true}
          setNumber={editingSetIndex !== null ? editingSetIndex + 1 : sets.length + 1}
          exerciseName={exercise.name}
          initialSet={editingSetIndex !== null ? sets[editingSetIndex] : undefined}
          onSave={(set) => handleSetSave(set, editingSetIndex)}
          onCancel={() => {
            setIsAddingSet(false);
            setEditingSetIndex(null);
          }}
        />
      )}
    </div>
  );
};
