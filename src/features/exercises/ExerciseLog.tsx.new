import React, { useState, useEffect, useCallback } from 'react';
import ProgramModal from '@/features/programs/ProgramModal';
import { v4 as uuidv4 } from 'uuid';
import LogOptions from './LogOptions';
import { ExerciseSetLogger } from './ExerciseSetLogger';
import WorkoutSummary from './WorkoutSummary';
import { exportExerciseData } from '@/utils/exportUtils';
import { getExerciseLogsByDate, saveExerciseLog, deleteExerciseLog } from '@/utils/localStorageUtils';
import ExerciseCard from '@/components/ExerciseCard';
import SideMenu from '@/components/SideMenu';
import { useNavigate } from 'react-router-dom';
import { ExerciseSet, ExerciseLog as ExerciseLogType, Exercise } from '@/types/exercise';
import { ExerciseData } from '@/services/exerciseDataService';
import CopyFromPreviousSessionDialog from './CopyFromPreviousSessionDialog';
import { normalizeExerciseData, normalizeExerciseSet } from '@/utils/exerciseUtils';

// Convert date to normalized timestamp
const dateToTimestamp = (date: Date | string | number): Date => {
  if (date instanceof Date) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);
  }
  const result = new Date(date);
  if (isNaN(result.getTime())) {
    throw new Error(`Invalid date: ${date}`);
  }
  return new Date(result.getFullYear(), result.getMonth(), result.getDate(), 0, 0, 0, 0);
};

const ExerciseLog: React.FC = () => {
  const [exercises, setExercises] = useState<ExerciseLogType[]>([]);
  const [selectedExercise, setSelectedExercise] = useState<ExerciseLogType | null>(null);
  const [showSetLogger, setShowSetLogger] = useState(false);
  const [showProgramModal, setShowProgramModal] = useState(false);
  const [editingSetIndex, setEditingSetIndex] = useState<number | undefined>();
  const [loading, setLoading] = useState(false);
  const [showCopyDialog, setShowCopyDialog] = useState(false);
  const navigate = useNavigate();

  // Load exercises for current day
  useEffect(() => {
    loadExercises(new Date());
  }, []);

  // Handle exercise data loading
  const loadExercises = useCallback(async (date: Date) => {
    let currentLoadedDate = date;
    setLoading(true);
    try {
      const logs = await getExerciseLogsByDate(dateToTimestamp(currentLoadedDate));
      setExercises(logs.filter(log => log !== null).map(normalizeExerciseData));
    } catch (error) {
      console.error('Failed to load exercises:', error);
      setExercises([]);
    }
    setLoading(false);
  }, []);

  const handleAddExercise = (exercise: Exercise) => {
    const newExercise = normalizeExerciseData({
      id: uuidv4(),
      timestamp: dateToTimestamp(new Date()),
      exerciseName: exercise.name,
      name: exercise.name,
      sets: [],
      type: exercise.type,
      category: exercise.category,
      primaryMuscles: exercise.primaryMuscles,
      secondaryMuscles: exercise.secondaryMuscles,
      defaultUnit: exercise.defaultUnit,
      metrics: exercise.metrics
    });
    
    setExercises(prevExercises => [...prevExercises, newExercise]);
    saveExerciseLog(newExercise);
    setShowSetLogger(true);
    setSelectedExercise(newExercise);
  };

  const handleSaveSet = (setData: ExerciseSet) => {
    if (!selectedExercise) return;
    const updatedSets = [...selectedExercise.sets];

    if (editingSetIndex !== undefined) {
      updatedSets[editingSetIndex] = normalizeExerciseSet(setData);
    } else {
      updatedSets.push(normalizeExerciseSet(setData));
    }

    const updatedExercise = normalizeExerciseData({
      ...selectedExercise,
      sets: updatedSets
    });

    saveExerciseLog(updatedExercise);
    setExercises(prev => prev.map(ex => 
      ex.id === selectedExercise.id ? updatedExercise : ex
    ));
    setEditingSetIndex(undefined);
  };

  const handleDeleteSet = (exerciseId: string, setIndex: number) => {
    const exercise = exercises.find(ex => ex.id === exerciseId);
    if (!exercise) return;

    const updatedSets = [...exercise.sets];
    updatedSets.splice(setIndex, 1);

    const updatedExercise = normalizeExerciseData({
      ...exercise,
      sets: updatedSets
    });

    saveExerciseLog(updatedExercise);
    setExercises(prev => prev.map(ex => 
      ex.id === exerciseId ? updatedExercise : ex
    ));
  };

  const handleDeleteExercise = (exerciseToDelete: ExerciseLogType) => {
    setExercises(prev => prev.filter(ex => ex.id !== exerciseToDelete.id));
    if (selectedExercise?.id === exerciseToDelete.id) {
      setSelectedExercise(null);
      setShowSetLogger(false);
    }
    deleteExerciseLog(exerciseToDelete);
  };

  const handleExportData = () => {
    const data = exercises.map(exercise => ({
      id: exercise.id,
      exerciseName: exercise.exerciseName,
      sets: exercise.sets,
      timestamp: dateToTimestamp(exercise.timestamp)
    }));
    exportExerciseData(data);
  };

  const handleEditSet = (exerciseId: string, setIndex: number) => {
    const exercise = exercises.find(ex => ex.id === exerciseId);
    if (!exercise) return;
    
    setSelectedExercise(exercise);
    setEditingSetIndex(setIndex);
    setShowSetLogger(true);
  };

  return (
    <div className="flex min-h-screen bg-black text-white">
      <SideMenu />
      
      <main className="flex-1 pb-safe">
        <div className="container mx-auto p-4 max-w-3xl">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">Exercise Log</h1>
            <div className="flex gap-2">
              <button
                onClick={() => navigate('/programs')}
                className="px-3 py-1 bg-blue-700 text-white rounded"
              >
                Programs
              </button>
            </div>
          </div>

          {loading ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
            </div>
          ) : (
            <>
              <LogOptions onAddExercise={handleAddExercise} />

              <div className="space-y-4 mt-6">
                {exercises.map((exercise) => (
                  <ExerciseCard
                    key={exercise.id}
                    exercise={exercise}
                    onDeleteExercise={() => handleDeleteExercise(exercise)}
                    onDeleteSet={(setIndex) => handleDeleteSet(exercise.id, setIndex)}
                    onEditSet={(setIndex) => handleEditSet(exercise.id, setIndex)}
                  />
                ))}
              </div>

              {exercises.length > 0 && (
                <div className="mt-8 space-x-4">
                  <button
                    onClick={() => setShowProgramModal(true)}
                    className="px-4 py-2 bg-blue-700 text-white rounded"
                  >
                    Save as Program
                  </button>
                  <button
                    onClick={handleExportData}
                    className="px-4 py-2 bg-gray-700 text-white rounded"
                  >
                    Export Data
                  </button>
                </div>
              )}
            </>
          )}
        </div>
      </main>

      {showSetLogger && selectedExercise && (
        <ExerciseSetLogger
          exercise={selectedExercise}
          onClose={() => {
            setShowSetLogger(false);
            setSelectedExercise(null);
            setEditingSetIndex(undefined);
          }}
          onSave={handleSaveSet}
          editingSet={editingSetIndex !== undefined ? selectedExercise.sets[editingSetIndex] : undefined}
        />
      )}

      {showProgramModal && (
        <ProgramModal
          onClose={() => setShowProgramModal(false)}
          exercises={exercises.map(ex => ({
            id: ex.id,
            exerciseName: ex.exerciseName,
            sets: ex.sets.map(normalizeExerciseSet),
            timestamp: ex.timestamp
          }))}
        />
      )}

      {showCopyDialog && (
        <CopyFromPreviousSessionDialog
          onClose={() => setShowCopyDialog(false)}
          onCopy={(exercise) => {
            handleAddExercise(normalizeExerciseData(exercise));
            setShowCopyDialog(false);
          }}
        />
      )}
    </div>
  );
};

export default ExerciseLog;
