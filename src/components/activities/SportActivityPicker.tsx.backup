import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '@/store/store';
import { ActivityType, SportActivity } from '@/types/activityTypes';
import { activityService } from '@/services/activityService';
import { teamSportsTemplate } from '@/config/defaultTemplates';
import UniversalActivityLogger from './UniversalActivityLogger';

interface SportActivityPickerProps {
  onClose: () => void;
  onBack: () => void;
  onActivityLogged: () => void;
  selectedDate?: Date;
}

const SportActivityPicker: React.FC<SportActivityPickerProps> = ({
  onClose,
  onBack,
  onActivityLogged,
  selectedDate = new Date()
}) => {
  const user = useSelector((state: RootState) => state.auth.user);
  const [sports, setSports] = useState<SportActivity[]>([]);
  const [selectedSport, setSelectedSport] = useState<SportActivity | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [view, setView] = useState<'list' | 'logging'>('list');

  useEffect(() => {
    loadSportActivities();
  }, []);

  const loadSportActivities = () => {
    const sportActivities = activityService.getActivitiesByType(ActivityType.SPORT);
    setSports(sportActivities.map((activity, index) => ({
      ...activity,
      id: `sport-${index}`
    })) as SportActivity[]);
  };

  const handleSportSelect = (sport: SportActivity) => {
    setSelectedSport(sport);
    setView('logging');
  };

  // Get unique categories for filtering
  const categories = ['All', ...Array.from(new Set(sports.flatMap(sport => sport.categories || [])))];

  // Filter sports based on search and category
  const filteredSports = sports.filter(sport => {
    const matchesSearch = sport.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === '' || selectedCategory === 'All' || 
      sport.categories?.includes(selectedCategory);
    return matchesSearch && matchesCategory;
  });
    setCurrentSession(prev => ({
      ...prev,
      skills: sport.primarySkills.map(skill => ({
        skillName: skill,
        attempts: 0,
        successful: 0,
        rating: 5
      }))
    }));
    setView('logging');
  };

  const handleAddSession = () => {
    if (currentSession.duration > 0) {
      setSessions(prev => [...prev, { ...currentSession }]);
      setCurrentSession({
        duration: 60,
        intensity: 5,
        score: '',
        opponent: '',
        performance: 5,
        skills: selectedSport?.primarySkills.map(skill => ({
          skillName: skill,
          attempts: 0,
          successful: 0,
          rating: 5
        })) || [],
        notes: ''
      });
    }
  };

  const handleRemoveSession = (index: number) => {
    setSessions(prev => prev.filter((_, i) => i !== index));
  };

  const updateSkill = (skillIndex: number, field: keyof SportSkill, value: any) => {
    setCurrentSession(prev => ({
      ...prev,
      skills: prev.skills.map((skill, index) => 
        index === skillIndex ? { ...skill, [field]: value } : skill
      )
    }));
  };

  const handleSaveSport = async () => {
    if (!selectedSport || !user?.id || sessions.length === 0) return;

    setLoading(true);
    try {
      await activityLoggingService.logSportActivity(
        selectedSport.id,
        selectedSport.name,
        sessions,
        user.id,
        selectedDate
      );
      onActivityLogged();
    } catch (error) {
      console.error('Error saving sport activity:', error);
    } finally {
      setLoading(false);
    }
  };

  if (view === 'logging' && selectedSport) {
    return (
      <div className="fixed inset-0 bg-black/90 flex items-center justify-center p-4 z-50">
        <div className="bg-[#1a1a1a] rounded-xl w-full max-w-3xl max-h-[90vh] flex flex-col">
          {/* Header */}
          <div className="p-6 border-b border-white/10">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-bold text-white">{selectedSport.name}</h2>
                <p className="text-gray-400 text-sm mt-1">{selectedSport.description}</p>
                <div className="flex items-center gap-4 mt-2 text-sm text-gray-500">
                  <span>{selectedSport.teamBased ? 'Team Sport' : 'Individual Sport'}</span>
                  <span>•</span>
                  <span>Skill Level: {selectedSport.skillLevel}</span>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setView('list')}
                  className="px-3 py-1 text-sm bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                >
                  Change Sport
                </button>
                <button
                  onClick={onClose}
                  className="p-2 hover:bg-white/10 rounded-lg transition-colors"
                >
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto p-6">
            {/* Current Session Input */}
            <div className="mb-6">
              <h3 className="text-lg font-medium text-white mb-4">Log Session #{sessions.length + 1}</h3>
              
              {/* Basic Session Info */}
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Duration (minutes)</label>
                  <input
                    type="number"
                    value={currentSession.duration}
                    onChange={(e) => setCurrentSession(prev => ({ ...prev, duration: Number(e.target.value) }))}
                    className="w-full p-3 bg-[#2a2a2a] border border-white/10 rounded-lg text-white focus:outline-none focus:border-blue-500"
                    min="1"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Intensity (1-10)</label>
                  <input
                    type="range"
                    min="1"
                    max="10"
                    value={currentSession.intensity}
                    onChange={(e) => setCurrentSession(prev => ({ ...prev, intensity: Number(e.target.value) }))}
                    className="w-full"
                  />
                  <div className="text-center text-white mt-1">{currentSession.intensity}/10</div>
                </div>
              </div>

              {/* Score and Opponent (if applicable) */}
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Score (optional)</label>
                  <input
                    type="text"
                    value={currentSession.score}
                    onChange={(e) => setCurrentSession(prev => ({ ...prev, score: e.target.value }))}
                    className="w-full p-3 bg-[#2a2a2a] border border-white/10 rounded-lg text-white focus:outline-none focus:border-blue-500"
                    placeholder="e.g., 2-1, 15-10"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Opponent (optional)</label>
                  <input
                    type="text"
                    value={currentSession.opponent}
                    onChange={(e) => setCurrentSession(prev => ({ ...prev, opponent: e.target.value }))}
                    className="w-full p-3 bg-[#2a2a2a] border border-white/10 rounded-lg text-white focus:outline-none focus:border-blue-500"
                    placeholder="Team or player name"
                  />
                </div>
              </div>

              {/* Performance Rating */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-300 mb-2">Overall Performance (1-10)</label>
                <input
                  type="range"
                  min="1"
                  max="10"
                  value={currentSession.performance}
                  onChange={(e) => setCurrentSession(prev => ({ ...prev, performance: Number(e.target.value) }))}
                  className="w-full"
                />
                <div className="text-center text-white mt-1">{currentSession.performance}/10</div>
              </div>

              {/* Skills Assessment */}
              {currentSession.skills.length > 0 && (
                <div className="mb-4">
                  <h4 className="text-md font-medium text-white mb-3">Skills Assessment</h4>
                  <div className="space-y-3">
                    {currentSession.skills.map((skill, index) => (
                      <div key={index} className="p-3 bg-[#2a2a2a] rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-white font-medium">{skill.skillName}</span>
                          <span className="text-sm text-gray-400">Rating: {skill.rating}/10</span>
                        </div>
                        <div className="grid grid-cols-3 gap-2">
                          <div>
                            <label className="block text-xs text-gray-400 mb-1">Attempts</label>
                            <input
                              type="number"
                              value={skill.attempts}
                              onChange={(e) => updateSkill(index, 'attempts', Number(e.target.value))}
                              className="w-full p-2 bg-[#1a1a1a] border border-white/10 rounded text-white text-sm"
                              min="0"
                            />
                          </div>
                          <div>
                            <label className="block text-xs text-gray-400 mb-1">Successful</label>
                            <input
                              type="number"
                              value={skill.successful}
                              onChange={(e) => updateSkill(index, 'successful', Number(e.target.value))}
                              className="w-full p-2 bg-[#1a1a1a] border border-white/10 rounded text-white text-sm"
                              min="0"
                              max={skill.attempts}
                            />
                          </div>
                          <div>
                            <label className="block text-xs text-gray-400 mb-1">Rating</label>
                            <input
                              type="range"
                              min="1"
                              max="10"
                              value={skill.rating}
                              onChange={(e) => updateSkill(index, 'rating', Number(e.target.value))}
                              className="w-full"
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Notes */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-300 mb-2">Session Notes</label>
                <textarea
                  value={currentSession.notes}
                  onChange={(e) => setCurrentSession(prev => ({ ...prev, notes: e.target.value }))}
                  className="w-full p-3 bg-[#2a2a2a] border border-white/10 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  rows={3}
                  placeholder="Notes about this session..."
                />
              </div>

              <button
                onClick={handleAddSession}
                disabled={currentSession.duration <= 0}
                className="w-full py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-colors"
              >
                Add Session
              </button>
            </div>

            {/* Sessions List */}
            {sessions.length > 0 && (
              <div className="mb-6">
                <h3 className="text-lg font-medium text-white mb-4">Completed Sessions</h3>
                <div className="space-y-3">
                  {sessions.map((session, index) => (
                    <div key={index} className="p-4 bg-[#2a2a2a] rounded-lg">
                      <div className="flex items-start justify-between">
                        <div className="text-white space-y-1">
                          <div className="font-medium">Session {index + 1}</div>
                          <div className="text-sm text-gray-400">
                            {session.duration} min • Intensity {session.intensity}/10 • Performance {session.performance}/10
                          </div>
                          {session.score && (
                            <div className="text-sm text-green-400">Score: {session.score}</div>
                          )}
                          {session.opponent && (
                            <div className="text-sm text-blue-400">vs {session.opponent}</div>
                          )}
                          {session.notes && (
                            <div className="text-sm text-gray-400">"{session.notes}"</div>
                          )}
                        </div>
                        <button
                          onClick={() => handleRemoveSession(index)}
                          className="text-red-400 hover:text-red-300 p-1"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="p-6 border-t border-white/10">
            <div className="flex gap-3">
              <button
                onClick={onBack}
                className="flex-1 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium transition-colors"
              >
                Back to Activities
              </button>
              <button
                onClick={handleSaveSport}
                disabled={sessions.length === 0 || loading}
                className="flex-1 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-colors"
              >
                {loading ? 'Saving...' : `Save Activity (${sessions.length} sessions)`}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black/90 flex items-center justify-center p-4 z-50">
      <div className="bg-[#1a1a1a] rounded-xl w-full max-w-4xl max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-white/10">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-white">Sports Activities</h2>
              <p className="text-gray-400">Choose a sport to log your training or match</p>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white/10 rounded-lg transition-colors"
            >
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Search and Categories */}
          <div className="mt-4 space-y-4">
            <input
              type="text"
              placeholder="Search sports..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full p-3 bg-[#2a2a2a] border border-white/10 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
            />
            <div className="flex flex-wrap gap-2">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    selectedCategory === category.id
                      ? 'bg-green-600 text-white'
                      : 'bg-[#2a2a2a] text-gray-300 hover:bg-[#3a3a3a]'
                  }`}
                >
                  {category.icon} {category.name}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Sports List */}
        <div className="flex-1 overflow-y-auto p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {filteredSports.map((sport) => (
              <button
                key={sport.id}
                onClick={() => handleSportSelect(sport)}
                className="p-4 bg-[#2a2a2a] hover:bg-[#3a3a3a] rounded-lg text-left transition-colors border border-white/10 hover:border-white/20"
              >
                <h3 className="text-white font-medium mb-2">{sport.name}</h3>
                <p className="text-gray-400 text-sm mb-3">{sport.description}</p>
                <div className="flex items-center gap-4 text-xs text-gray-500 mb-2">
                  <span>{sport.teamBased ? 'Team Sport' : 'Individual'}</span>
                  <span>•</span>
                  <span>{sport.skillLevel}</span>
                </div>
                <div className="flex flex-wrap gap-1 mb-2">
                  {sport.primarySkills.slice(0, 3).map((skill, idx) => (
                    <span key={idx} className="px-2 py-1 text-xs bg-green-600/20 text-green-300 rounded">
                      {skill}
                    </span>
                  ))}
                </div>
                <div className="text-xs text-gray-500">
                  Equipment: {sport.equipment.join(', ')}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-white/10">
          <button
            onClick={onBack}
            className="px-6 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
          >
            ← Back to Activity Types
          </button>
        </div>
      </div>
    </div>
  );
};

export default SportActivityPicker;
