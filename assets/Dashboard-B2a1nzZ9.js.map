{"version":3,"mappings":"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","names":["Dashboard","navigate","useNavigate","user","useSelector","state","todaysExercises","setTodaysExercises","useState","selectedDate","setSelectedDate","isLoading","setIsLoading","error","setError","normalizeDate","useCallback","date","normalized","fetchExercises","loadedDate","allExercises","getAllExercisesByDate","acc","ex","useEffect","handleDateChange","newDate","formatDate","handleDeleteExercise","exercise","errorMessage","deleteActivityLog","__vitePreload","n","deleteExercise","jsx","jsxs","exerciseWithDate","ExerciseCard"],"ignoreList":[],"sources":["../../src/features/dashboard/Dashboard.tsx"],"sourcesContent":["import { useSelector } from 'react-redux';\r\nimport { RootState } from '@/store/store';\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport { getAllExercisesByDate, UnifiedExerciseData, deleteExercise } from '@/utils/unifiedExerciseUtils';\r\nimport ExerciseCard from '@/components/ExerciseCard';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Dashboard = () => {\r\n  const navigate = useNavigate();\r\n  const user = useSelector((state: RootState) => state.auth.user);\r\n  const [todaysExercises, setTodaysExercises] = useState<UnifiedExerciseData[]>([]);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Date utility functions (same as ExerciseLog)\r\n  const normalizeDate = useCallback((date: Date): Date => {\r\n    const normalized = new Date(date);\r\n    normalized.setHours(0, 0, 0, 0);\r\n    return normalized;\r\n  }, []);\r\n\r\n  // Unified data fetching that combines resistance exercises and activity logs\r\n  const fetchExercises = useCallback(async (date: Date) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    if (!user?.id) {\r\n      setTodaysExercises([]);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    const loadedDate = normalizeDate(date);\r\n\r\n    try {\r\n      // Get all exercises (resistance + activities) for the date\r\n      const allExercises = await getAllExercisesByDate(loadedDate, user.id);\r\n      \r\n      console.log('üìä Dashboard loaded exercises:', {\r\n        date: loadedDate,\r\n        totalCount: allExercises.length,\r\n        byType: allExercises.reduce((acc, ex) => {\r\n          acc[ex.activityType || 'resistance'] = (acc[ex.activityType || 'resistance'] || 0) + 1;\r\n          return acc;\r\n        }, {} as Record<string, number>),\r\n        exercises: allExercises\r\n      });\r\n\r\n      setTodaysExercises(allExercises);\r\n    } catch (error) {\r\n      console.error('Error fetching exercises:', error);\r\n      setError('Failed to load exercises');\r\n      setTodaysExercises([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [normalizeDate, user?.id]);\r\n\r\n  // Load exercises when user or selectedDate changes\r\n  useEffect(() => {\r\n    if (user?.id) {\r\n      fetchExercises(selectedDate);\r\n    } else {\r\n      setTodaysExercises([]);\r\n      setIsLoading(false);\r\n    }\r\n  }, [user?.id, selectedDate]);\r\n\r\n  const handleDateChange = useCallback((newDate: Date) => {\r\n    const normalized = normalizeDate(newDate);\r\n    setSelectedDate(normalized);\r\n  }, [normalizeDate]);\r\n\r\n\r\n  const formatDate = (date: Date): string => {\r\n    return date.toLocaleDateString('no-NO', {\r\n      day: 'numeric',\r\n      month: 'long',\r\n    });\r\n  };\r\n\r\n\r\n  const handleDeleteExercise = async (exercise: UnifiedExerciseData) => {\r\n    if (!exercise.id || !user?.id) {\r\n      const errorMessage = 'Cannot delete exercise: missing user ID or exercise ID';\r\n      console.error(errorMessage, { userId: user?.id, exerciseId: exercise.id });\r\n      setError(errorMessage);\r\n      return;\r\n    }\r\n\r\n    if (!window.confirm(`Are you sure you want to delete \"${exercise.exerciseName}\"?`)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('üóëÔ∏è Attempting to delete exercise:', {\r\n        exerciseId: exercise.id,\r\n        userId: user.id,\r\n        activityType: exercise.activityType\r\n      });\r\n\r\n      if (exercise.activityType && exercise.activityType !== 'resistance') {\r\n        // Delete activity log\r\n        const { deleteActivityLog } = await import('@/utils/unifiedExerciseUtils');\r\n        await deleteActivityLog(exercise.id, user.id);\r\n        console.log('‚úÖ Activity log deleted successfully');\r\n      } else {\r\n        // Delete traditional exercise log\r\n        await deleteExercise(exercise, user.id);\r\n        console.log('‚úÖ Exercise deleted from Firestore successfully');\r\n      }\r\n\r\n      await fetchExercises(selectedDate);\r\n    } catch (error) {\r\n      console.error('‚ùå Error deleting exercise:', error);\r\n      const errorMessage =\r\n        error instanceof Error ? error.message : 'An unknown error occurred';\r\n      setError(`Failed to delete exercise: ${errorMessage}`);\r\n      await fetchExercises(selectedDate);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4 bg-black min-h-screen text-white\">\r\n      {error && (\r\n        <div className=\"bg-red-500 text-white p-4 rounded-lg mb-4 flex justify-between items-center\">\r\n          <span>{error}</span>\r\n          <button onClick={() => setError(null)} className=\"text-white\">\r\n            ‚úï\r\n          </button>\r\n        </div>\r\n      )}\r\n      {/* Header with navigation */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <button \r\n            onClick={() => navigate('/')}\r\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\r\n            aria-label=\"Back to Exercise Log\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\r\n            </svg>\r\n          </button>\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold\">Dashboard - {formatDate(selectedDate)}</h1>\r\n            <small className=\"text-gray-400\">Exercise Summary</small>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <button \r\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\" \r\n            onClick={() => handleDateChange(new Date(selectedDate.getTime() - 86400000))}\r\n            aria-label=\"Previous day\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\r\n            </svg>\r\n          </button>\r\n          <button \r\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\r\n            onClick={() => handleDateChange(new Date())}\r\n            aria-label=\"Today\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n            </svg>\r\n          </button>\r\n          <button \r\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\" \r\n            onClick={() => handleDateChange(new Date(selectedDate.getTime() + 86400000))}\r\n            aria-label=\"Next day\"\r\n          >\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Exercise list */}\r\n      <div className=\"space-y-4\">\r\n        {todaysExercises.length === 0 ? (\r\n          <div className=\"text-center py-8 text-gray-400\">\r\n            <p>No exercises logged for this date</p>\r\n            <button \r\n              onClick={() => navigate('/')}\r\n              className=\"mt-4 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors\"\r\n            >\r\n              Go to Exercise Log\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          todaysExercises.map((exercise) => {\r\n            // Ensure timestamp is always a Date\r\n            const exerciseWithDate = {\r\n              ...exercise,\r\n              timestamp: exercise.timestamp instanceof Date\r\n                ? exercise.timestamp\r\n                : new Date(exercise.timestamp),\r\n              userId: exercise.userId ?? (user ? user.id : '') // Ensure userId is always a string and user is not null\r\n            };\r\n            return (\r\n              <ExerciseCard\r\n                key={exercise.id || `${exercise.exerciseName}-${new Date(exercise.timestamp).getTime()}`}\r\n                exercise={exerciseWithDate}\r\n                onDelete={() => handleDeleteExercise(exerciseWithDate)}\r\n              />\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      {/* Floating action button */}\r\n      <button\r\n        className=\"fixed right-6 bottom-6 w-16 h-16 bg-green-600 rounded-full flex items-center justify-center text-white shadow-lg hover:bg-green-700 transition-colors\"\r\n        onClick={() => navigate('/')}\r\n        aria-label=\"Go to Exercise Log\"\r\n      >\r\n        <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M12 4v16m8-8H4\"\r\n          />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"file":"assets/Dashboard-B2a1nzZ9.js"}