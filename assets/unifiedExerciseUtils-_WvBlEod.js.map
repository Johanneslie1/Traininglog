{"version":3,"file":"unifiedExerciseUtils-_WvBlEod.js","sources":["../../src/context/SupersetContext.tsx","../../src/services/firebase/exerciseLogs.ts","../../src/types/activityTypes.ts","../../src/data/activityDatabase.ts","../../src/services/activityService.ts","../../src/components/ExerciseCard.tsx","../../src/utils/unifiedExerciseUtils.ts"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, ReactNode, useEffect } from 'react';\r\nimport { SupersetGroup } from '../types/session';\r\n\r\nexport interface SupersetState {\r\n  isCreating: boolean;\r\n  selectedExercises: string[];\r\n  activeSuperset: SupersetGroup | null;\r\n  supersets: SupersetGroup[];\r\n}\r\n\r\ninterface SupersetContextType {\r\n  state: SupersetState;\r\n  startCreating: () => void;\r\n  cancelCreating: () => void;\r\n  toggleExerciseSelection: (exerciseId: string) => void;\r\n  createSuperset: (name?: string) => SupersetGroup | null;\r\n  breakSuperset: (supersetId: string) => void;\r\n  addSuperset: (superset: SupersetGroup) => void;\r\n  removeSuperset: (supersetId: string) => void;\r\n  getSupersetByExercise: (exerciseId: string) => SupersetGroup | null;\r\n  isExerciseInSuperset: (exerciseId: string) => boolean;\r\n  removeExerciseFromSuperset: (exerciseId: string) => void;\r\n  clearAll: () => void;\r\n  loadSupersetsForDate: (date: string) => void;\r\n  saveSupersetsForDate: (date: string) => void;\r\n  updateExerciseOrder: (exerciseIds: string[]) => void;\r\n  renameSuperset: (supersetId: string, newName: string) => void;\r\n}\r\n\r\nconst SupersetContext = createContext<SupersetContextType | undefined>(undefined);\r\n\r\nexport const useSupersets = () => {\r\n  const context = useContext(SupersetContext);\r\n  if (!context) {\r\n    throw new Error('useSupersets must be used within a SupersetProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface SupersetProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst STORAGE_KEY = 'superset_data';\r\nconst EXERCISE_ORDER_KEY = 'exercise_order';\r\n\r\n// Helper functions for persistence\r\nconst getSupersetStorageKey = (date: string) => `${STORAGE_KEY}_${date}`;\r\nconst getExerciseOrderKey = (date: string) => `${EXERCISE_ORDER_KEY}_${date}`;\r\n\r\nconst loadSupersetsFromStorage = (date: string): SupersetGroup[] => {\r\n  try {\r\n    const stored = localStorage.getItem(getSupersetStorageKey(date));\r\n    return stored ? JSON.parse(stored) : [];\r\n  } catch (error) {\r\n    console.error('Error loading supersets from storage:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst saveSupersetsToStorage = (date: string, supersets: SupersetGroup[]) => {\r\n  try {\r\n    localStorage.setItem(getSupersetStorageKey(date), JSON.stringify(supersets));\r\n  } catch (error) {\r\n    console.error('Error saving supersets to storage:', error);\r\n  }\r\n};\r\n\r\n// New functions to handle exercise order persistence\r\nconst saveExerciseOrderToStorage = (date: string, exerciseIds: string[]) => {\r\n  try {\r\n    localStorage.setItem(getExerciseOrderKey(date), JSON.stringify(exerciseIds));\r\n  } catch (error) {\r\n    console.error('Error saving exercise order to storage:', error);\r\n  }\r\n};\r\n\r\nconst loadExerciseOrderFromStorage = (date: string): string[] => {\r\n  try {\r\n    const stored = localStorage.getItem(getExerciseOrderKey(date));\r\n    return stored ? JSON.parse(stored) : [];\r\n  } catch (error) {\r\n    console.error('Error loading exercise order from storage:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const SupersetProvider: React.FC<SupersetProviderProps> = ({ children }) => {\r\n  const [state, setState] = useState<SupersetState>({\r\n    isCreating: false,\r\n    selectedExercises: [],\r\n    activeSuperset: null,\r\n    supersets: []\r\n  });\r\n\r\n  const [currentDate, setCurrentDate] = useState<string>('');\r\n  const [exerciseOrder, setExerciseOrder] = useState<string[]>([]);\r\n\r\n  // Load supersets for a specific date\r\n  const loadSupersetsForDate = useCallback((date: string) => {\r\n    const storedSupersets = loadSupersetsFromStorage(date);\r\n    const storedExerciseOrder = loadExerciseOrderFromStorage(date);\r\n    \r\n    setState(prev => ({\r\n      ...prev,\r\n      supersets: storedSupersets\r\n    }));\r\n    \r\n    setExerciseOrder(storedExerciseOrder);\r\n    setCurrentDate(date);\r\n  }, []);\r\n\r\n  // Save supersets for current date\r\n  const saveSupersetsForDate = useCallback((date: string) => {\r\n    saveSupersetsToStorage(date, state.supersets);\r\n    saveExerciseOrderToStorage(date, exerciseOrder);\r\n  }, [state.supersets, exerciseOrder]);\r\n\r\n  // Auto-save when supersets change\r\n  useEffect(() => {\r\n    if (currentDate) {\r\n      saveSupersetsToStorage(currentDate, state.supersets);\r\n    }\r\n  }, [state.supersets, currentDate]);\r\n\r\n  // Auto-save when exercise order changes\r\n  useEffect(() => {\r\n    if (currentDate && exerciseOrder.length > 0) {\r\n      saveExerciseOrderToStorage(currentDate, exerciseOrder);\r\n    }\r\n  }, [exerciseOrder, currentDate]);\r\n\r\n  // Update exercise order\r\n  const updateExerciseOrder = useCallback((exerciseIds: string[]) => {\r\n    setExerciseOrder(exerciseIds);\r\n    if (currentDate) {\r\n      saveExerciseOrderToStorage(currentDate, exerciseIds);\r\n    }\r\n  }, [currentDate]);\r\n\r\n  const startCreating = useCallback(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      isCreating: true,\r\n      selectedExercises: []\r\n    }));\r\n  }, []);\r\n\r\n  const cancelCreating = useCallback(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      isCreating: false,\r\n      selectedExercises: []\r\n    }));\r\n  }, []);\r\n\r\n  const toggleExerciseSelection = useCallback((exerciseId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      selectedExercises: prev.selectedExercises.includes(exerciseId)\r\n        ? prev.selectedExercises.filter(id => id !== exerciseId)\r\n        : [...prev.selectedExercises, exerciseId]\r\n    }));\r\n  }, []);\r\n\r\n  const createSuperset = useCallback((name?: string): SupersetGroup | null => {\r\n    if (state.selectedExercises.length < 2) {\r\n      return null;\r\n    }\r\n\r\n    const newSuperset: SupersetGroup = {\r\n      id: crypto.randomUUID(),\r\n      name: name || `Superset ${state.supersets.length + 1}`,\r\n      exerciseIds: state.selectedExercises,\r\n      order: state.supersets.length\r\n    };\r\n\r\n    setState(prev => ({\r\n      ...prev,\r\n      supersets: [...prev.supersets, newSuperset],\r\n      isCreating: false,\r\n      selectedExercises: []\r\n    }));\r\n\r\n    return newSuperset;\r\n  }, [state.selectedExercises, state.supersets.length]);\r\n\r\n  const breakSuperset = useCallback((supersetId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      supersets: prev.supersets.filter(s => s.id !== supersetId)\r\n    }));\r\n  }, []);\r\n\r\n  const addSuperset = useCallback((superset: SupersetGroup) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      supersets: [...prev.supersets, superset]\r\n    }));\r\n  }, []);\r\n\r\n  const removeSuperset = useCallback((supersetId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      supersets: prev.supersets.filter(s => s.id !== supersetId)\r\n    }));\r\n  }, []);\r\n\r\n  const getSupersetByExercise = useCallback((exerciseId: string): SupersetGroup | null => {\r\n    return state.supersets.find(s => s.exerciseIds.includes(exerciseId)) || null;\r\n  }, [state.supersets]);\r\n\r\n  const isExerciseInSuperset = useCallback((exerciseId: string): boolean => {\r\n    return state.supersets.some(s => s.exerciseIds.includes(exerciseId));\r\n  }, [state.supersets]);\r\n\r\n  const removeExerciseFromSuperset = useCallback((exerciseId: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      supersets: prev.supersets\r\n        .map(superset => ({\r\n          ...superset,\r\n          exerciseIds: superset.exerciseIds.filter(id => id !== exerciseId)\r\n        }))\r\n        .filter(superset => superset.exerciseIds.length > 1) // Remove supersets with fewer than 2 exercises\r\n    }));\r\n  }, []);\r\n\r\n  const renameSuperset = useCallback((supersetId: string, newName: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      supersets: prev.supersets.map(superset => \r\n        superset.id === supersetId \r\n          ? { ...superset, name: newName } \r\n          : superset\r\n      )\r\n    }));\r\n  }, []);\r\n\r\n  const clearAll = useCallback(() => {\r\n    setState({\r\n      isCreating: false,\r\n      selectedExercises: [],\r\n      activeSuperset: null,\r\n      supersets: []\r\n    });\r\n    setExerciseOrder([]);\r\n  }, []);\r\n\r\n  const value: SupersetContextType = {\r\n    state,\r\n    startCreating,\r\n    cancelCreating,\r\n    toggleExerciseSelection,\r\n    createSuperset,\r\n    breakSuperset,\r\n    addSuperset,\r\n    removeSuperset,\r\n    getSupersetByExercise,\r\n    isExerciseInSuperset,\r\n    removeExerciseFromSuperset,\r\n    clearAll,\r\n    loadSupersetsForDate,\r\n    saveSupersetsForDate,\r\n    updateExerciseOrder,\r\n    renameSuperset\r\n  };\r\n\r\n  return (\r\n    <SupersetContext.Provider value={value}>\r\n      {children}\r\n    </SupersetContext.Provider>\r\n  );\r\n};\r\n","import {\r\n  collection,\r\n  doc,\r\n  deleteDoc,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  Timestamp,\r\n  getDoc,\r\n  setDoc\r\n} from 'firebase/firestore';\r\nimport { db } from './config';\r\nimport { ExerciseLog } from '@/types/exercise';\r\nimport { ExerciseSet } from '@/types/sets';\r\n\r\ntype ExerciseLogInput = {\r\n  exerciseName: string;\r\n  userId: string;\r\n  sets: ExerciseSet[];\r\n};\r\n\r\nexport const addExerciseLog = async (\r\n  logData: ExerciseLogInput,\r\n  selectedDate: Date,\r\n  existingId?: string\r\n): Promise<string> => {\r\n  try {\r\n    console.log('üìù addExerciseLog called with:', { logData, selectedDate, existingId });\r\n    \r\n    if (!logData.userId) {\r\n      throw new Error('userId is required to save exercise log');\r\n    }\r\n\r\n    const exerciseData = {\r\n      ...logData,\r\n      timestamp: Timestamp.fromDate(selectedDate || new Date()),\r\n      deviceId: window.navigator.userAgent,\r\n      userId: logData.userId,\r\n      sets: Array.isArray(logData.sets) ? logData.sets : [] // Ensure sets is always an array\r\n    };\r\n\r\n    console.log('üìù Prepared exercise data:', exerciseData);\r\n\r\n    let docRef;\r\n    let docId;\r\n\r\n    // Simplified ID management - always use the new subcollection structure\r\n    if (existingId) {\r\n      // Update existing document\r\n      docRef = doc(db, 'users', logData.userId, 'exercises', existingId);\r\n      docId = existingId;\r\n      console.log('üìù Updating existing document:', docId);\r\n      \r\n      // Clean up any old location document if it exists\r\n      try {\r\n        const oldRef = doc(db, 'exerciseLogs', existingId);\r\n        const oldDoc = await getDoc(oldRef);\r\n        if (oldDoc.exists()) {\r\n          await deleteDoc(oldRef);\r\n          console.log('‚úÖ Cleaned up old location document:', existingId);\r\n        }\r\n      } catch (error) {\r\n        console.warn('‚ö†Ô∏è Could not clean up old location:', error);\r\n      }\r\n    } else {\r\n      // Create new document\r\n      docRef = doc(collection(db, 'users', logData.userId, 'exercises'));\r\n      docId = docRef.id;\r\n      console.log('üìù Creating new document with ID:', docId);\r\n    }\r\n\r\n    // Save the document\r\n    await setDoc(docRef, exerciseData);\r\n    console.log('‚úÖ Exercise saved successfully with ID:', docId);\r\n    return docId;\r\n    \r\n  } catch (error) {\r\n    const firebaseError = error as { code?: string; message?: string };\r\n    console.error('‚ùå Error adding exercise log:', {\r\n      error,\r\n      code: firebaseError.code,\r\n      message: firebaseError.message,\r\n      userId: logData.userId\r\n    });\r\n    \r\n    if (firebaseError.code === 'permission-denied') {\r\n      throw new Error('Permission denied. Please check your authentication.');\r\n    }\r\n    throw new Error('Failed to add exercise log: ' + (firebaseError.message || 'Unknown error'));\r\n  }\r\n};\r\n\r\nexport const deleteExerciseLog = async (logId: string, userId: string): Promise<void> => {\r\n  try {\r\n    console.log('üóëÔ∏è deleteExerciseLog called with:', { logId, userId });\r\n    \r\n    if (!userId) {\r\n      throw new Error('userId is required to delete exercise log');\r\n    }\r\n\r\n    if (!logId) {\r\n      throw new Error('logId is required to delete exercise log');\r\n    }\r\n\r\n    // Try both locations - the new subcollection path and the old top-level path\r\n    const exerciseRef = doc(db, 'users', userId, 'exercises', logId);\r\n    const oldExerciseRef = doc(db, 'exerciseLogs', logId);\r\n\r\n    // Try to get documents from both locations\r\n    let exerciseDoc = null;\r\n    let oldExerciseDoc = null;\r\n\r\n    try {\r\n      exerciseDoc = await getDoc(exerciseRef);\r\n      console.log('üìÑ New path document check:', {\r\n        exists: exerciseDoc.exists(),\r\n        userId: exerciseDoc.exists() ? exerciseDoc.data()?.userId : null,\r\n      });\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Error checking new path:', error);\r\n    }\r\n\r\n    try {\r\n      oldExerciseDoc = await getDoc(oldExerciseRef);\r\n      console.log('üìÑ Old path document check:', {\r\n        exists: oldExerciseDoc.exists(),\r\n        userId: oldExerciseDoc.exists() ? oldExerciseDoc.data()?.userId : null,\r\n      });\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Error checking old path:', error);\r\n    }\r\n\r\n    let deleted = false;\r\n    let errors = [];\r\n\r\n    // Try to delete from new location first if it exists and belongs to the user\r\n    if (exerciseDoc?.exists()) {\r\n      const data = exerciseDoc.data();\r\n      if (data?.userId === userId) {\r\n        try {\r\n          await deleteDoc(exerciseRef);\r\n          console.log('‚úÖ Exercise deleted from new location successfully');\r\n          deleted = true;\r\n        } catch (error) {\r\n          console.error('‚ùå Failed to delete from new location:', error);\r\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n          errors.push(`New location error: ${errorMessage}`);\r\n        }\r\n      } else if (data?.userId) {\r\n        console.warn('‚ö†Ô∏è Document exists but belongs to different user:', {\r\n          docUserId: data.userId,\r\n          requestUserId: userId\r\n        });\r\n      }\r\n    }\r\n\r\n    // If not deleted yet, try old location\r\n    if (!deleted && oldExerciseDoc?.exists()) {\r\n      const data = oldExerciseDoc.data();\r\n      if (data?.userId === userId) {\r\n        try {\r\n          await deleteDoc(oldExerciseRef);\r\n          console.log('‚úÖ Exercise deleted from old location successfully');\r\n          deleted = true;\r\n        } catch (error) {\r\n          console.error('‚ùå Failed to delete from old location:', error);\r\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n          errors.push(`Old location error: ${errorMessage}`);\r\n        }\r\n      } else if (data?.userId) {\r\n        console.warn('‚ö†Ô∏è Document exists but belongs to different user:', {\r\n          docUserId: data.userId,\r\n          requestUserId: userId\r\n        });\r\n      }\r\n    }\r\n\r\n    if (!deleted) {\r\n      const errorMessage = !exerciseDoc && !oldExerciseDoc \r\n        ? 'Could not access exercise document. Please check your permissions.'\r\n        : errors.length > 0\r\n          ? `Failed to delete exercise: ${errors.join('; ')}`\r\n          : 'Exercise log not found or you do not have permission to delete it';\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error deleting exercise log:', error);\r\n    throw error instanceof Error ? error : new Error('Failed to delete exercise log');\r\n  }\r\n};\r\n\r\nexport const getExerciseLogs = async (userId: string, startDate: Date, endDate: Date): Promise<ExerciseLog[]> => {\r\n  try {\r\n    console.log('üìñ getExerciseLogs called with:', { userId, startDate, endDate });\r\n    \r\n    if (!userId) {\r\n      throw new Error('userId is required to fetch exercise logs');\r\n    }\r\n\r\n    // Query from the user's exercises subcollection\r\n    const exercisesRef = collection(db, 'users', userId, 'exercises');\r\n    const q = query(\r\n      exercisesRef,\r\n      where('timestamp', '>=', Timestamp.fromDate(startDate)),\r\n      where('timestamp', '<=', Timestamp.fromDate(endDate)),\r\n      orderBy('timestamp', 'desc')\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const exercises = querySnapshot.docs.map((doc) => {\r\n      const data = doc.data();\r\n      return {\r\n        id: doc.id,\r\n        exerciseName: data.exerciseName,\r\n        sets: data.sets,\r\n        timestamp: data.timestamp.toDate(),\r\n        deviceId: data.deviceId || 'legacy',\r\n        userId: data.userId\r\n      } as ExerciseLog;\r\n    });\r\n\r\n    console.log('üìñ Retrieved exercises:', exercises.length);\r\n    return exercises;\r\n  } catch (error) {\r\n    console.error('‚ùå Error fetching exercise logs:', error);\r\n    throw new Error('Failed to fetch exercises');\r\n  }\r\n};\r\n","// Exercise Activity Types - Core enum for the entire system\r\nexport enum ActivityType {\r\n  RESISTANCE = 'resistance',\r\n  SPORT = 'sport', \r\n  STRETCHING = 'stretching',\r\n  ENDURANCE = 'endurance',\r\n  SPEED_AGILITY = 'speedAgility',\r\n  OTHER = 'other'\r\n}\r\n\r\n// Base interface for all activity categories\r\nexport interface BaseActivity {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  activityType: ActivityType;\r\n  category: string;\r\n  createdBy?: string;\r\n  isDefault: boolean;\r\n  userId?: string;\r\n}\r\n\r\n// Resistance Exercise (existing strength training)\r\nexport interface ResistanceExercise extends BaseActivity {\r\n  activityType: ActivityType.RESISTANCE;\r\n  primaryMuscles: string[];\r\n  secondaryMuscles: string[];\r\n  equipment: string[];\r\n  instructions: string[];\r\n  tips?: string[];\r\n  defaultUnit: 'kg' | 'lb';\r\n  metrics: {\r\n    trackWeight: boolean;\r\n    trackReps: boolean;\r\n    trackRPE: boolean;\r\n    trackTime?: boolean;\r\n    trackDistance?: boolean;\r\n  };\r\n}\r\n\r\n// Sport Activity\r\nexport interface SportActivity extends BaseActivity {\r\n  activityType: ActivityType.SPORT;\r\n  sportType: string; // football, basketball, tennis, etc.\r\n  position?: string;\r\n  skillLevel: 'beginner' | 'intermediate' | 'advanced' | 'professional';\r\n  teamBased: boolean;\r\n  equipment: string[];\r\n  primarySkills: string[];\r\n  metrics: {\r\n    trackDuration: boolean;\r\n    trackScore: boolean;\r\n    trackIntensity: boolean;\r\n    trackOpponent?: boolean;\r\n    trackPerformance: boolean;\r\n  };\r\n}\r\n\r\n// Stretching Exercise\r\nexport interface StretchingExercise extends BaseActivity {\r\n  activityType: ActivityType.STRETCHING;\r\n  stretchType: 'static' | 'dynamic' | 'pnf' | 'yoga' | 'pilates';\r\n  targetMuscles: string[];\r\n  bodyRegion: string[];\r\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\r\n  instructions: string[];\r\n  metrics: {\r\n    trackDuration: boolean;\r\n    trackHoldTime: boolean;\r\n    trackIntensity: boolean;\r\n    trackFlexibility: boolean;\r\n  };\r\n}\r\n\r\n// Endurance Exercise\r\nexport interface EnduranceExercise extends BaseActivity {\r\n  activityType: ActivityType.ENDURANCE;\r\n  enduranceType: 'running' | 'cycling' | 'swimming' | 'rowing' | 'hiking' | 'walking' | 'other';\r\n  environment: 'indoor' | 'outdoor' | 'both';\r\n  intensity: 'low' | 'moderate' | 'high' | 'variable';\r\n  equipment: string[];\r\n  metrics: {\r\n    trackDistance: boolean;\r\n    trackDuration: boolean;\r\n    trackPace: boolean;\r\n    trackHeartRate: boolean;\r\n    trackCalories: boolean;\r\n    trackElevation?: boolean;\r\n  };\r\n}\r\n\r\n// Other Activity (catch-all category)\r\nexport interface OtherActivity extends BaseActivity {\r\n  activityType: ActivityType.OTHER;\r\n  customCategory: string;\r\n  customFields: ActivityCustomField[];\r\n  instructions?: string[];\r\n  metrics: {\r\n    [key: string]: boolean;\r\n  };\r\n}\r\n\r\n// Custom field definition for Other activities\r\nexport interface ActivityCustomField {\r\n  fieldId: string;\r\n  label: string;\r\n  type: 'number' | 'string' | 'boolean' | 'select' | 'duration' | 'date';\r\n  required: boolean;\r\n  options?: string[]; // for select fields\r\n  unit?: string;\r\n  validation?: {\r\n    min?: number;\r\n    max?: number;\r\n    pattern?: string;\r\n  };\r\n}\r\n\r\n// Speed & Agility Activity\r\nexport interface SpeedAgilityActivity extends BaseActivity {\r\n  activityType: ActivityType.SPEED_AGILITY;\r\n  drillType: 'sprint' | 'agility' | 'reaction' | 'acceleration' | 'change_of_direction' | 'ladder' | 'cone';\r\n  equipment: string[];\r\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\r\n  setup: string[];\r\n  instructions: string[];\r\n  metrics: {\r\n    trackTime: boolean;\r\n    trackDistance: boolean;\r\n    trackReps: boolean;\r\n    trackHeight?: boolean;\r\n    trackRPE: boolean;\r\n  };\r\n}\r\n\r\n// Union type for all activity types\r\nexport type ActivityExercise = \r\n  | ResistanceExercise \r\n  | SportActivity \r\n  | StretchingExercise \r\n  | EnduranceExercise \r\n  | SpeedAgilityActivity\r\n  | OtherActivity;\r\n\r\n// Activity logging data structures\r\nexport interface BaseActivityLog {\r\n  id: string;\r\n  activityId: string;\r\n  activityType: ActivityType;\r\n  activityName: string;\r\n  userId: string;\r\n  timestamp: Date;\r\n  notes?: string;\r\n  deviceId?: string;\r\n}\r\n\r\n// Resistance exercise logging (existing)\r\nexport interface ResistanceLog extends BaseActivityLog {\r\n  activityType: ActivityType.RESISTANCE;\r\n  sets: ResistanceSet[];\r\n}\r\n\r\nexport interface ResistanceSet {\r\n  setNumber: number;\r\n  weight: number;\r\n  reps: number;\r\n  rpe?: number;\r\n  restTime?: number;\r\n  notes?: string;\r\n}\r\n\r\n// Sport activity logging\r\nexport interface SportLog extends BaseActivityLog {\r\n  activityType: ActivityType.SPORT;\r\n  sessions: SportSession[];\r\n}\r\n\r\nexport interface SportSession {\r\n  sessionNumber: number;\r\n  duration: number; // minutes\r\n  intensity: number; // 1-10 scale\r\n  score?: string;\r\n  opponent?: string;\r\n  performance: number; // 1-10 scale\r\n  skills: SportSkill[];\r\n  notes?: string;\r\n}\r\n\r\nexport interface SportSkill {\r\n  skillName: string;\r\n  attempts: number;\r\n  successful: number;\r\n  rating: number; // 1-10 scale\r\n}\r\n\r\n// Stretching exercise logging\r\nexport interface StretchingLog extends BaseActivityLog {\r\n  activityType: ActivityType.STRETCHING;\r\n  stretches: StretchingSet[];\r\n}\r\n\r\nexport interface StretchingSet {\r\n  setNumber: number;\r\n  duration: number; // seconds\r\n  holdTime?: number; // seconds for static stretches\r\n  intensity: number; // 1-10 scale\r\n  flexibility: number; // 1-10 scale (before/after improvement)\r\n  notes?: string;\r\n}\r\n\r\n// Endurance exercise logging\r\nexport interface EnduranceLog extends BaseActivityLog {\r\n  activityType: ActivityType.ENDURANCE;\r\n  sessions: EnduranceSession[];\r\n}\r\n\r\nexport interface EnduranceSession {\r\n  sessionNumber: number;\r\n  distance?: number; // meters\r\n  duration: number; // minutes\r\n  pace?: number; // seconds per unit distance\r\n  averageHeartRate?: number;\r\n  maxHeartRate?: number;\r\n  calories?: number;\r\n  elevation?: number; // meters\r\n  rpe?: number; // Rate of Perceived Exertion (1-10)\r\n  hrZone1?: number; // Zone 1 time in minutes\r\n  hrZone2?: number; // Zone 2 time in minutes\r\n  hrZone3?: number; // Zone 3 time in minutes\r\n  notes?: string;\r\n}\r\n\r\n// Speed & Agility exercise logging\r\nexport interface SpeedAgilityLog extends BaseActivityLog {\r\n  activityType: ActivityType.SPEED_AGILITY;\r\n  sessions: SpeedAgilitySession[];\r\n}\r\n\r\nexport interface SpeedAgilitySession {\r\n  sessionNumber: number;\r\n  reps: number;\r\n  time?: number; // seconds for timed drills\r\n  distance?: number; // meters for distance drills\r\n  height?: number; // cm for jumping drills\r\n  restTime?: number; // seconds between reps\r\n  rpe: number; // Rate of Perceived Exertion (1-10)\r\n  notes?: string;\r\n}\r\n\r\n// Other activity logging\r\nexport interface OtherLog extends BaseActivityLog {\r\n  activityType: ActivityType.OTHER;\r\n  customData: OtherActivityData[];\r\n}\r\n\r\nexport interface OtherActivityData {\r\n  sessionNumber: number;\r\n  customValues: { [fieldId: string]: any };\r\n  notes?: string;\r\n}\r\n\r\n// Union type for all activity logs\r\nexport type ActivityLog = \r\n  | ResistanceLog \r\n  | SportLog \r\n  | StretchingLog \r\n  | EnduranceLog \r\n  | SpeedAgilityLog\r\n  | OtherLog;\r\n\r\n// Export filters for each activity type\r\nexport interface ActivityFilter {\r\n  activityType?: ActivityType[];\r\n  category?: string[];\r\n  searchText?: string;\r\n  equipment?: string[];\r\n  difficulty?: string[];\r\n  skillLevel?: string[];\r\n}\r\n\r\n// Activity statistics\r\nexport interface ActivityStats {\r\n  totalSessions: number;\r\n  totalDuration?: number;\r\n  lastPerformed: Date;\r\n  averagePerformance?: number;\r\n  bestSession?: any;\r\n  improvementTrend?: 'improving' | 'stable' | 'declining';\r\n}\r\n","import { \r\n  ActivityType, \r\n  ResistanceExercise, \r\n  SportActivity, \r\n  StretchingExercise, \r\n  EnduranceExercise, \r\n  OtherActivity \r\n} from '@/types/activityTypes';\r\n\r\n// Resistance Exercises Database (Strength Training)\r\nexport const resistanceExercises: Omit<ResistanceExercise, 'id'>[] = [\r\n  // Compound Movements\r\n  {\r\n    name: 'Barbell Back Squat',\r\n    description: 'A fundamental compound exercise for lower body strength',\r\n    activityType: ActivityType.RESISTANCE,\r\n    category: 'compound',\r\n    primaryMuscles: ['quadriceps', 'glutes', 'hamstrings'],\r\n    secondaryMuscles: ['core', 'calves', 'lower_back'],\r\n    equipment: ['barbell', 'squat_rack'],\r\n    instructions: [\r\n      'Position bar on upper back',\r\n      'Feet shoulder-width apart',\r\n      'Lower until thighs parallel to ground',\r\n      'Drive through heels to stand'\r\n    ],\r\n    tips: ['Keep chest up', 'Maintain neutral spine'],\r\n    defaultUnit: 'kg',\r\n    isDefault: true,\r\n    metrics: {\r\n      trackWeight: true,\r\n      trackReps: true,\r\n      trackRPE: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Deadlift',\r\n    description: 'A fundamental compound exercise for posterior chain strength',\r\n    activityType: ActivityType.RESISTANCE,\r\n    category: 'compound',\r\n    primaryMuscles: ['hamstrings', 'glutes', 'lower_back'],\r\n    secondaryMuscles: ['traps', 'forearms', 'core'],\r\n    equipment: ['barbell'],\r\n    instructions: [\r\n      'Stand with feet hip-width apart',\r\n      'Grip bar outside legs',\r\n      'Keep back straight, chest up',\r\n      'Drive through heels and hips'\r\n    ],\r\n    defaultUnit: 'kg',\r\n    isDefault: true,\r\n    metrics: {\r\n      trackWeight: true,\r\n      trackReps: true,\r\n      trackRPE: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Bench Press',\r\n    description: 'A fundamental compound exercise for upper body pushing strength',\r\n    activityType: ActivityType.RESISTANCE,\r\n    category: 'compound',\r\n    primaryMuscles: ['chest', 'shoulders', 'triceps'],\r\n    secondaryMuscles: ['core'],\r\n    equipment: ['barbell', 'bench'],\r\n    instructions: [\r\n      'Lie on bench with feet on floor',\r\n      'Grip bar slightly wider than shoulders',\r\n      'Lower bar to chest',\r\n      'Press bar up to full extension'\r\n    ],\r\n    defaultUnit: 'kg',\r\n    isDefault: true,\r\n    metrics: {\r\n      trackWeight: true,\r\n      trackReps: true,\r\n      trackRPE: true\r\n    }\r\n  }\r\n];\r\n\r\n// Sports Database\r\nexport const sportActivities: Omit<SportActivity, 'id'>[] = [\r\n  // Ball Sports\r\n  {\r\n    name: 'Football Match',\r\n    description: 'Competitive football/soccer match',\r\n    activityType: ActivityType.SPORT,\r\n    category: 'team_sport',\r\n    sportType: 'football',\r\n    skillLevel: 'intermediate',\r\n    teamBased: true,\r\n    equipment: ['football', 'boots', 'shin_guards'],\r\n    primarySkills: ['passing', 'dribbling', 'shooting', 'defending'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDuration: true,\r\n      trackScore: true,\r\n      trackIntensity: true,\r\n      trackOpponent: true,\r\n      trackPerformance: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Basketball Training',\r\n    description: 'Basketball skills practice session',\r\n    activityType: ActivityType.SPORT,\r\n    category: 'team_sport',\r\n    sportType: 'basketball',\r\n    skillLevel: 'intermediate',\r\n    teamBased: true,\r\n    equipment: ['basketball', 'basketball_shoes'],\r\n    primarySkills: ['shooting', 'dribbling', 'passing', 'defense'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDuration: true,\r\n      trackScore: false,\r\n      trackIntensity: true,\r\n      trackPerformance: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Tennis Match',\r\n    description: 'Competitive tennis match',\r\n    activityType: ActivityType.SPORT,\r\n    category: 'racket_sport',\r\n    sportType: 'tennis',\r\n    skillLevel: 'intermediate',\r\n    teamBased: false,\r\n    equipment: ['tennis_racket', 'tennis_balls', 'tennis_shoes'],\r\n    primarySkills: ['serve', 'forehand', 'backhand', 'volley'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDuration: true,\r\n      trackScore: true,\r\n      trackIntensity: true,\r\n      trackOpponent: true,\r\n      trackPerformance: true\r\n    }\r\n  },\r\n  // Individual Sports\r\n  {\r\n    name: 'Swimming Training',\r\n    description: 'Swimming technique and endurance training',\r\n    activityType: ActivityType.SPORT,\r\n    category: 'aquatic_sport',\r\n    sportType: 'swimming',\r\n    skillLevel: 'intermediate',\r\n    teamBased: false,\r\n    equipment: ['goggles', 'swimsuit', 'swim_cap'],\r\n    primarySkills: ['freestyle', 'backstroke', 'breaststroke', 'butterfly'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDuration: true,\r\n      trackScore: false,\r\n      trackIntensity: true,\r\n      trackPerformance: true\r\n    }\r\n  }\r\n];\r\n\r\n// Stretching Exercises Database\r\nexport const stretchingExercises: Omit<StretchingExercise, 'id'>[] = [\r\n  // Static Stretches\r\n  {\r\n    name: 'Hamstring Stretch',\r\n    description: 'Static stretch for hamstring flexibility',\r\n    activityType: ActivityType.STRETCHING,\r\n    category: 'static',\r\n    stretchType: 'static',\r\n    targetMuscles: ['hamstrings'],\r\n    bodyRegion: ['legs'],\r\n    difficulty: 'beginner',\r\n    instructions: [\r\n      'Sit with one leg extended',\r\n      'Reach forward toward toes',\r\n      'Hold stretch without bouncing',\r\n      'Feel stretch in back of thigh'\r\n    ],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDuration: true,\r\n      trackHoldTime: true,\r\n      trackIntensity: true,\r\n      trackFlexibility: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Shoulder Cross-Body Stretch',\r\n    description: 'Static stretch for shoulder flexibility',\r\n    activityType: ActivityType.STRETCHING,\r\n    category: 'static',\r\n    stretchType: 'static',\r\n    targetMuscles: ['shoulders', 'rear_deltoids'],\r\n    bodyRegion: ['upper_body'],\r\n    difficulty: 'beginner',\r\n    instructions: [\r\n      'Pull arm across body',\r\n      'Use opposite hand to assist',\r\n      'Hold stretch gently',\r\n      'Feel stretch in shoulder'\r\n    ],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDuration: true,\r\n      trackHoldTime: true,\r\n      trackIntensity: true,\r\n      trackFlexibility: true\r\n    }\r\n  },\r\n  // Dynamic Stretches\r\n  {\r\n    name: 'Leg Swings',\r\n    description: 'Dynamic leg mobility exercise',\r\n    activityType: ActivityType.STRETCHING,\r\n    category: 'dynamic',\r\n    stretchType: 'dynamic',\r\n    targetMuscles: ['hip_flexors', 'hamstrings', 'glutes'],\r\n    bodyRegion: ['legs', 'hips'],\r\n    difficulty: 'beginner',\r\n    instructions: [\r\n      'Hold wall or support for balance',\r\n      'Swing leg forward and back',\r\n      'Keep torso upright',\r\n      'Control the movement'\r\n    ],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDuration: true,\r\n      trackHoldTime: false,\r\n      trackIntensity: true,\r\n      trackFlexibility: true\r\n    }\r\n  }\r\n];\r\n\r\n// Endurance Exercises Database\r\nexport const enduranceExercises: Omit<EnduranceExercise, 'id'>[] = [\r\n  // Running\r\n  {\r\n    name: 'Outdoor Running',\r\n    description: 'Running outdoors for cardiovascular fitness',\r\n    activityType: ActivityType.ENDURANCE,\r\n    category: 'running',\r\n    enduranceType: 'running',\r\n    environment: 'outdoor',\r\n    intensity: 'moderate',\r\n    equipment: ['running_shoes', 'fitness_tracker'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDistance: true,\r\n      trackDuration: true,\r\n      trackPace: true,\r\n      trackHeartRate: true,\r\n      trackCalories: true,\r\n      trackElevation: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Treadmill Running',\r\n    description: 'Indoor treadmill running session',\r\n    activityType: ActivityType.ENDURANCE,\r\n    category: 'running',\r\n    enduranceType: 'running',\r\n    environment: 'indoor',\r\n    intensity: 'moderate',\r\n    equipment: ['treadmill', 'running_shoes'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDistance: true,\r\n      trackDuration: true,\r\n      trackPace: true,\r\n      trackHeartRate: true,\r\n      trackCalories: true\r\n    }\r\n  },\r\n  // Cycling\r\n  {\r\n    name: 'Road Cycling',\r\n    description: 'Outdoor road cycling for endurance',\r\n    activityType: ActivityType.ENDURANCE,\r\n    category: 'cycling',\r\n    enduranceType: 'cycling',\r\n    environment: 'outdoor',\r\n    intensity: 'moderate',\r\n    equipment: ['bicycle', 'helmet', 'cycling_shoes'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDistance: true,\r\n      trackDuration: true,\r\n      trackPace: true,\r\n      trackHeartRate: true,\r\n      trackCalories: true,\r\n      trackElevation: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Stationary Bike',\r\n    description: 'Indoor stationary bike session',\r\n    activityType: ActivityType.ENDURANCE,\r\n    category: 'cycling',\r\n    enduranceType: 'cycling',\r\n    environment: 'indoor',\r\n    intensity: 'moderate',\r\n    equipment: ['stationary_bike'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDistance: true,\r\n      trackDuration: true,\r\n      trackPace: true,\r\n      trackHeartRate: true,\r\n      trackCalories: true\r\n    }\r\n  },\r\n  // Swimming\r\n  {\r\n    name: 'Pool Swimming',\r\n    description: 'Swimming laps for cardiovascular fitness',\r\n    activityType: ActivityType.ENDURANCE,\r\n    category: 'swimming',\r\n    enduranceType: 'swimming',\r\n    environment: 'indoor',\r\n    intensity: 'moderate',\r\n    equipment: ['goggles', 'swimsuit', 'swim_cap'],\r\n    isDefault: true,\r\n    metrics: {\r\n      trackDistance: true,\r\n      trackDuration: true,\r\n      trackPace: true,\r\n      trackHeartRate: true,\r\n      trackCalories: true\r\n    }\r\n  }\r\n];\r\n\r\n// Other Activities Database (examples)\r\nexport const otherActivities: Omit<OtherActivity, 'id'>[] = [\r\n  {\r\n    name: 'Meditation Session',\r\n    description: 'Mindfulness and meditation practice',\r\n    activityType: ActivityType.OTHER,\r\n    category: 'wellness',\r\n    customCategory: 'mindfulness',\r\n    customFields: [\r\n      {\r\n        fieldId: 'duration',\r\n        label: 'Duration',\r\n        type: 'duration',\r\n        required: true,\r\n        unit: 'minutes'\r\n      },\r\n      {\r\n        fieldId: 'technique',\r\n        label: 'Meditation Technique',\r\n        type: 'select',\r\n        required: false,\r\n        options: ['mindfulness', 'breathing', 'body_scan', 'loving_kindness']\r\n      },\r\n      {\r\n        fieldId: 'focus_level',\r\n        label: 'Focus Level',\r\n        type: 'number',\r\n        required: false,\r\n        validation: { min: 1, max: 10 }\r\n      }\r\n    ],\r\n    isDefault: true,\r\n    metrics: {\r\n      duration: true,\r\n      technique: true,\r\n      focus_level: true\r\n    }\r\n  },\r\n  {\r\n    name: 'Physiotherapy Session',\r\n    description: 'Physical therapy and rehabilitation exercises',\r\n    activityType: ActivityType.OTHER,\r\n    category: 'rehabilitation',\r\n    customCategory: 'therapy',\r\n    customFields: [\r\n      {\r\n        fieldId: 'duration',\r\n        label: 'Session Duration',\r\n        type: 'duration',\r\n        required: true,\r\n        unit: 'minutes'\r\n      },\r\n      {\r\n        fieldId: 'body_part',\r\n        label: 'Target Body Part',\r\n        type: 'select',\r\n        required: true,\r\n        options: ['knee', 'shoulder', 'back', 'ankle', 'wrist', 'hip']\r\n      },\r\n      {\r\n        fieldId: 'pain_level_before',\r\n        label: 'Pain Level Before',\r\n        type: 'number',\r\n        required: false,\r\n        validation: { min: 0, max: 10 }\r\n      },\r\n      {\r\n        fieldId: 'pain_level_after',\r\n        label: 'Pain Level After',\r\n        type: 'number',\r\n        required: false,\r\n        validation: { min: 0, max: 10 }\r\n      }\r\n    ],\r\n    isDefault: true,\r\n    metrics: {\r\n      duration: true,\r\n      body_part: true,\r\n      pain_level_before: true,\r\n      pain_level_after: true\r\n    }\r\n  }\r\n];\r\n\r\n// Database collections by activity type\r\nexport const activityDatabases = {\r\n  [ActivityType.RESISTANCE]: resistanceExercises,\r\n  [ActivityType.SPORT]: sportActivities,\r\n  [ActivityType.STRETCHING]: stretchingExercises,\r\n  [ActivityType.ENDURANCE]: enduranceExercises,\r\n  [ActivityType.OTHER]: otherActivities,\r\n  [ActivityType.SPEED_AGILITY]: [] // TODO: Add speed agility exercises from JSON\r\n};\r\n\r\n// Helper functions\r\nexport const getActivitiesByType = (activityType: ActivityType) => {\r\n  return activityDatabases[activityType] || [];\r\n};\r\n\r\nexport const getAllActivities = () => {\r\n  return Object.values(activityDatabases).flat();\r\n};\r\n\r\nexport const getCategoriesByActivityType = (activityType: ActivityType): string[] => {\r\n  const activities = getActivitiesByType(activityType);\r\n  return [...new Set(activities.map(activity => activity.category))];\r\n};\r\n","import { \r\n  ActivityType, \r\n  ActivityExercise, \r\n  ActivityLog, \r\n  ActivityFilter,\r\n  ResistanceLog,\r\n  SportLog,\r\n  StretchingLog,\r\n  EnduranceLog,\r\n  OtherLog\r\n} from '@/types/activityTypes';\r\nimport { activityDatabases, getActivitiesByType } from '@/data/activityDatabase';\r\nimport { loadExerciseDatabases, getExercisesByActivityType } from './exerciseDatabaseService';\r\n\r\n/**\r\n * Service for managing different types of activity exercises\r\n */\r\nclass ActivityService {\r\n  \r\n  /**\r\n   * Get all activities of a specific type\r\n   */\r\n  getActivitiesByType(activityType: ActivityType): Omit<ActivityExercise, 'id'>[] {\r\n    // Pull from new JSON exercise databases first\r\n    const newExercises = getExercisesByActivityType(activityType);\r\n    if (newExercises.length > 0) {\r\n      return newExercises.map(ex => {\r\n        const m: any = ex.metrics || {};\r\n        const base = {\r\n          name: ex.name,\r\n          description: ex.description || '',\r\n          activityType: (ex.activityType || activityType) as ActivityType,\r\n          category: ex.category || 'general',\r\n          createdBy: ex.createdBy || 'system',\r\n          isDefault: ex.isDefault !== undefined ? ex.isDefault : true,\r\n          userId: undefined as string | undefined\r\n        };\r\n\r\n        switch (base.activityType) {\r\n          case ActivityType.ENDURANCE:\r\n            return {\r\n              ...base,\r\n              enduranceType: 'other',\r\n              environment: (ex as any).environment || 'both',\r\n              intensity: 'moderate',\r\n              equipment: ex.equipment || [],\r\n              metrics: {\r\n                trackDistance: !!m.trackDistance,\r\n                trackDuration: !!m.trackTime || !!m.trackDuration,\r\n                trackPace: !!m.trackPace,\r\n                trackHeartRate: !!m.trackHeartRate,\r\n                trackCalories: !!m.trackCalories,\r\n                trackElevation: !!m.trackElevation\r\n              }\r\n            } as any;\r\n          case ActivityType.SPORT:\r\n            return {\r\n              ...base,\r\n              sportType: (ex as any).sportType || 'general',\r\n              position: undefined,\r\n              skillLevel: 'intermediate',\r\n              teamBased: (ex as any).teamBased || false,\r\n              equipment: ex.equipment || [],\r\n              primarySkills: (ex as any).skills || [],\r\n              metrics: {\r\n                trackDuration: !!m.trackDuration || !!m.trackTime,\r\n                trackScore: !!m.trackScore,\r\n                trackIntensity: !!m.trackIntensity || !!m.trackRPE,\r\n                trackOpponent: !!m.trackOpponent,\r\n                trackPerformance: !!m.trackPerformance\r\n              }\r\n            } as any;\r\n          case ActivityType.STRETCHING:\r\n            return {\r\n              ...base,\r\n              stretchType: 'static',\r\n              targetMuscles: ex.primaryMuscles || [],\r\n              bodyRegion: ['full_body'],\r\n              difficulty: (ex as any).difficulty || 'beginner',\r\n              instructions: ex.instructions || [],\r\n              metrics: {\r\n                trackDuration: true,\r\n                trackHoldTime: true,\r\n                trackIntensity: !!ex.metrics?.trackRPE,\r\n                trackFlexibility: true\r\n              }\r\n            } as any;\r\n          case ActivityType.OTHER:\r\n            return {\r\n              ...base,\r\n              customCategory: base.category,\r\n              customFields: [],\r\n              instructions: ex.instructions || [],\r\n              metrics: Object.keys(ex.metrics || {}).reduce((acc: any, k) => { acc[k] = true; return acc; }, {})\r\n            } as any;\r\n          case ActivityType.SPEED_AGILITY:\r\n            return {\r\n              ...base,\r\n              drillType: (ex as any).drillType || 'agility',\r\n              equipment: ex.equipment || [],\r\n              difficulty: (ex as any).difficulty || 'beginner',\r\n              setup: (ex as any).setup || [],\r\n              instructions: ex.instructions || [],\r\n              metrics: {\r\n                trackTime: !!m.trackTime,\r\n                trackDistance: !!m.trackDistance,\r\n                trackReps: !!m.trackReps,\r\n                trackHeight: !!m.trackHeight,\r\n                trackRPE: !!m.trackRPE\r\n              }\r\n            } as any;\r\n          case ActivityType.RESISTANCE:\r\n          default:\r\n            return {\r\n              ...base,\r\n              primaryMuscles: ex.primaryMuscles || [],\r\n              secondaryMuscles: ex.secondaryMuscles || [],\r\n              equipment: ex.equipment || [],\r\n              instructions: ex.instructions || [],\r\n              tips: ex.tips || [],\r\n              defaultUnit: (ex as any).defaultUnit || 'kg',\r\n              metrics: {\r\n                trackWeight: !!m.trackWeight,\r\n                trackReps: !!m.trackReps,\r\n                trackRPE: !!m.trackRPE\r\n              }\r\n            } as any;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Fallback to legacy hardcoded database\r\n    return getActivitiesByType(activityType);\r\n  }\r\n\r\n  /**\r\n   * Search activities with filters\r\n   */\r\n  searchActivities(filters: ActivityFilter): Omit<ActivityExercise, 'id'>[] {\r\n    // Get from new exercise databases first\r\n    const allNewExercises = loadExerciseDatabases();\r\n    let activities: any[] = [];\r\n    \r\n    // Combine all exercises from new databases\r\n    Object.values(allNewExercises).forEach(exerciseArray => {\r\n      activities = activities.concat(exerciseArray);\r\n    });\r\n    \r\n    // Add from old databases as fallback\r\n    const oldActivities = Object.values(activityDatabases).flat();\r\n    activities = activities.concat(oldActivities);\r\n\r\n    // Filter by activity type\r\n    if (filters.activityType && filters.activityType.length > 0) {\r\n      activities = activities.filter(activity => \r\n        filters.activityType!.includes(activity.activityType)\r\n      );\r\n    }\r\n\r\n    // Filter by category\r\n    if (filters.category && filters.category.length > 0) {\r\n      activities = activities.filter(activity => \r\n        filters.category!.includes(activity.category)\r\n      );\r\n    }\r\n\r\n    // Filter by search text\r\n    if (filters.searchText) {\r\n      const searchTerm = filters.searchText.toLowerCase();\r\n      activities = activities.filter(activity => \r\n        activity.name.toLowerCase().includes(searchTerm) ||\r\n        activity.description?.toLowerCase().includes(searchTerm) ||\r\n        activity.category.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n\r\n    // Filter by equipment (for activities that have equipment)\r\n    if (filters.equipment && filters.equipment.length > 0) {\r\n      activities = activities.filter(activity => {\r\n        if ('equipment' in activity) {\r\n          return filters.equipment!.some(eq => \r\n            activity.equipment.includes(eq)\r\n          );\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n\r\n    return activities;\r\n  }\r\n\r\n  /**\r\n   * Get categories for a specific activity type\r\n   */\r\n  getCategoriesByType(activityType: ActivityType): string[] {\r\n    const activities = this.getActivitiesByType(activityType);\r\n    return [...new Set(activities.map(activity => activity.category))];\r\n  }\r\n\r\n  /**\r\n   * Create a new custom activity\r\n   */\r\n  async createCustomActivity(\r\n    activityData: Omit<ActivityExercise, 'id' | 'isDefault'>,\r\n    userId: string\r\n  ): Promise<string> {\r\n    // This would save to Firebase/database\r\n    // For now, return a mock ID\r\n    const customActivity = {\r\n      ...activityData,\r\n      id: `custom-${Date.now()}`,\r\n      isDefault: false,\r\n      createdBy: userId,\r\n      userId: userId\r\n    };\r\n    \r\n    console.log('Creating custom activity:', customActivity);\r\n    return customActivity.id;\r\n  }\r\n\r\n  /**\r\n   * Get activity by ID (would query database)\r\n   */\r\n  async getActivityById(id: string): Promise<ActivityExercise | null> {\r\n    // This would query the database\r\n    // For now, search in default activities\r\n    const allActivities = Object.values(activityDatabases).flat();\r\n    const found = allActivities.find(activity => \r\n      `${activity.activityType}-${activity.name.replace(/\\s+/g, '-').toLowerCase()}` === id\r\n    );\r\n    \r\n    if (found) {\r\n      return {\r\n        ...found,\r\n        id: id\r\n      } as ActivityExercise;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Service for logging different types of activities\r\n */\r\nclass ActivityLoggingService {\r\n\r\n  /**\r\n   * Create a resistance exercise log\r\n   */\r\n  async logResistanceExercise(\r\n    activityId: string,\r\n    activityName: string,\r\n    sets: any[],\r\n    userId: string,\r\n    timestamp: Date = new Date()\r\n  ): Promise<string> {\r\n    const logData: Omit<ResistanceLog, 'id'> = {\r\n      activityId,\r\n      activityType: ActivityType.RESISTANCE,\r\n      activityName,\r\n      userId,\r\n      timestamp,\r\n      sets: sets.map((set, index) => ({\r\n        setNumber: index + 1,\r\n        weight: set.weight || 0,\r\n        reps: set.reps || 0,\r\n        rpe: set.rpe,\r\n        restTime: set.restTime,\r\n        notes: set.notes\r\n      }))\r\n    };\r\n\r\n    // Save to database\r\n    const logId = await this.saveActivityLog(logData);\r\n    return logId;\r\n  }\r\n\r\n  /**\r\n   * Create a sport activity log\r\n   */\r\n  async logSportActivity(\r\n    activityId: string,\r\n    activityName: string,\r\n    sessions: any[],\r\n    userId: string,\r\n    timestamp: Date = new Date()\r\n  ): Promise<string> {\r\n    const logData: Omit<SportLog, 'id'> = {\r\n      activityId,\r\n      activityType: ActivityType.SPORT,\r\n      activityName,\r\n      userId,\r\n      timestamp,\r\n      sessions: sessions.map((session, index) => ({\r\n        sessionNumber: index + 1,\r\n        duration: session.duration || 0,\r\n        distance: session.distance, // Include distance\r\n        calories: session.calories, // Include calories\r\n        intensity: session.intensity || 5,\r\n        score: session.score,\r\n        opponent: session.opponent,\r\n        performance: session.performance || 5,\r\n        skills: session.skills || [],\r\n        notes: session.notes\r\n      }))\r\n    };\r\n\r\n    const logId = await this.saveActivityLog(logData);\r\n    return logId;\r\n  }\r\n\r\n  /**\r\n   * Create a stretching exercise log\r\n   */\r\n  async logStretchingExercise(\r\n    activityId: string,\r\n    activityName: string,\r\n    stretches: any[],\r\n    userId: string,\r\n    timestamp: Date = new Date()\r\n  ): Promise<string> {\r\n    const logData: Omit<StretchingLog, 'id'> = {\r\n      activityId,\r\n      activityType: ActivityType.STRETCHING,\r\n      activityName,\r\n      userId,\r\n      timestamp,\r\n      stretches: stretches.map((stretch, index) => ({\r\n        setNumber: index + 1,\r\n        duration: stretch.duration || 0,\r\n        holdTime: stretch.holdTime,\r\n        intensity: stretch.intensity || 5,\r\n        flexibility: stretch.flexibility || 5,\r\n        stretchType: stretch.stretchType,\r\n        bodyPart: stretch.bodyPart,\r\n        notes: stretch.notes\r\n      }))\r\n    };\r\n\r\n    const logId = await this.saveActivityLog(logData);\r\n    return logId;\r\n  }\r\n\r\n  /**\r\n   * Create an endurance exercise log\r\n   */\r\n  async logEnduranceExercise(\r\n    activityId: string,\r\n    activityName: string,\r\n    sessions: any[],\r\n    userId: string,\r\n    timestamp: Date = new Date()\r\n  ): Promise<string> {\r\n    console.log('üèÉ Logging endurance exercise with sessions:', sessions);\r\n    \r\n    const logData: Omit<EnduranceLog, 'id'> = {\r\n      activityId,\r\n      activityType: ActivityType.ENDURANCE,\r\n      activityName,\r\n      userId,\r\n      timestamp,\r\n      sessions: sessions.map((session, index) => {\r\n        console.log('üèÉ Processing endurance session:', session);\r\n        return {\r\n          sessionNumber: index + 1,\r\n          distance: session.distance,\r\n          duration: session.duration || 0,\r\n          pace: session.pace,\r\n          // Handle both field name variations\r\n          averageHeartRate: session.averageHeartRate || session.averageHR,\r\n          maxHeartRate: session.maxHeartRate || session.maxHR,\r\n          calories: session.calories,\r\n          elevation: session.elevation,\r\n          rpe: session.rpe, // Add RPE field\r\n          hrZone1: session.hrZone1, // Add heart rate zone fields\r\n          hrZone2: session.hrZone2,\r\n          hrZone3: session.hrZone3,\r\n          notes: session.notes\r\n        };\r\n      })\r\n    };\r\n\r\n    console.log('üèÉ Final endurance log data:', logData);\r\n    const logId = await this.saveActivityLog(logData);\r\n    return logId;\r\n  }\r\n\r\n  /**\r\n   * Create an other activity log\r\n   */\r\n  async logOtherActivity(\r\n    activityId: string,\r\n    activityName: string,\r\n    customData: any[],\r\n    userId: string,\r\n    timestamp: Date = new Date()\r\n  ): Promise<string> {\r\n    const logData: Omit<OtherLog, 'id'> = {\r\n      activityId,\r\n      activityType: ActivityType.OTHER,\r\n      activityName,\r\n      userId,\r\n      timestamp,\r\n      customData: customData.map((data, index) => ({\r\n        sessionNumber: index + 1,\r\n        duration: data.duration,\r\n        calories: data.calories,\r\n        heartRate: data.heartRate,\r\n        intensity: data.intensity,\r\n        notes: data.notes,\r\n        customValues: data.customValues || {},\r\n        ...data // Include all other fields\r\n      }))\r\n    };\r\n\r\n    const logId = await this.saveActivityLog(logData);\r\n    return logId;\r\n  }\r\n\r\n  /**\r\n   * Create a speed & agility exercise log\r\n   */\r\n  async logSpeedAgilityExercise(\r\n    activityId: string,\r\n    activityName: string,\r\n    sessions: any[],\r\n    userId: string,\r\n    timestamp: Date = new Date()\r\n  ): Promise<string> {\r\n    console.log('‚ö° Logging speed & agility exercise with sessions:', sessions);\r\n    \r\n    const logData = {\r\n      activityId,\r\n      activityType: ActivityType.SPEED_AGILITY,\r\n      activityName,\r\n      userId,\r\n      timestamp,\r\n      sessions: sessions.map((session, index) => {\r\n        console.log('‚ö° Processing speed & agility session:', session);\r\n        return {\r\n          sessionNumber: index + 1,\r\n          reps: session.reps || 0,\r\n          time: session.time, // Time for drills in seconds\r\n          distance: session.distance, // Distance for sprint drills\r\n          height: session.height, // Height for jumping drills\r\n          restTime: session.restTime, // Rest between reps\r\n          rpe: session.rpe || 0,\r\n          notes: session.notes\r\n        };\r\n      })\r\n    };\r\n\r\n    console.log('‚ö° Final speed & agility log data:', logData);\r\n    const logId = await this.saveActivityLog(logData);\r\n    return logId;\r\n  }\r\n\r\n  /**\r\n   * Generic save method - would integrate with Firebase\r\n   */\r\n  private async saveActivityLog(logData: Omit<ActivityLog, 'id'>): Promise<string> {\r\n    // This would save to Firebase/database\r\n    // For now, save to localStorage and return mock ID\r\n    const logId = `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const logWithId = {\r\n      ...logData,\r\n      id: logId\r\n    };\r\n\r\n    // Save to localStorage for demo\r\n    const existingLogs = JSON.parse(localStorage.getItem('activity-logs') || '[]');\r\n    existingLogs.push(logWithId);\r\n    localStorage.setItem('activity-logs', JSON.stringify(existingLogs));\r\n\r\n    console.log('Activity log saved:', logWithId);\r\n    return logId;\r\n  }\r\n\r\n  /**\r\n   * Get activity logs by user and date range\r\n   */\r\n  async getActivityLogs(\r\n    userId: string,\r\n    startDate?: Date,\r\n    endDate?: Date,\r\n    activityType?: ActivityType\r\n  ): Promise<ActivityLog[]> {\r\n    // This would query the database\r\n    // For demo, get from localStorage\r\n    const logs: ActivityLog[] = JSON.parse(localStorage.getItem('activity-logs') || '[]');\r\n    \r\n    let filteredLogs = logs.filter(log => log.userId === userId);\r\n\r\n    if (startDate) {\r\n      filteredLogs = filteredLogs.filter(log => \r\n        new Date(log.timestamp) >= startDate\r\n      );\r\n    }\r\n\r\n    if (endDate) {\r\n      filteredLogs = filteredLogs.filter(log => \r\n        new Date(log.timestamp) <= endDate\r\n      );\r\n    }\r\n\r\n    if (activityType) {\r\n      filteredLogs = filteredLogs.filter(log => \r\n        log.activityType === activityType\r\n      );\r\n    }\r\n\r\n    return filteredLogs.map(log => ({\r\n      ...log,\r\n      timestamp: new Date(log.timestamp)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Delete activity log\r\n   */\r\n  async deleteActivityLog(logId: string, userId: string): Promise<boolean> {\r\n    try {\r\n      // This would delete from database\r\n      // For demo, remove from localStorage\r\n      const logs: ActivityLog[] = JSON.parse(localStorage.getItem('activity-logs') || '[]');\r\n      const filteredLogs = logs.filter(log => \r\n        !(log.id === logId && log.userId === userId)\r\n      );\r\n      localStorage.setItem('activity-logs', JSON.stringify(filteredLogs));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting activity log:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Export service instances\r\nexport const activityService = new ActivityService();\r\nexport const activityLoggingService = new ActivityLoggingService();\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { ExerciseSet } from '../types/sets';\r\nimport { UnifiedExerciseData } from '../utils/unifiedExerciseUtils';\r\nimport { useSupersets } from '../context/SupersetContext';\r\n\r\ninterface ExerciseCardProps {\r\n  exercise: UnifiedExerciseData;\r\n  onEdit?: () => void;\r\n  onDelete?: () => void;\r\n  showActions?: boolean;\r\n  exerciseNumber?: number; // Add exercise number prop\r\n  subNumber?: number; // Add sub-number for exercises within a superset\r\n}\r\n\r\nconst getDifficultyColor = (difficulty?: string): string => {\r\n  if (!difficulty) return 'var(--color-normal)';\r\n  \r\n  switch (difficulty) {\r\n    case 'WARMUP': return 'var(--color-warmup)';\r\n    case 'EASY': return 'var(--color-easy)';\r\n    case 'MODERATE': return 'var(--color-moderate)';\r\n    case 'HARD': return 'var(--color-hard)';\r\n    default: return 'var(--color-moderate)';\r\n  }\r\n};\r\n\r\nconst ExerciseCard: React.FC<ExerciseCardProps> = ({\r\n  exercise,\r\n  onEdit,\r\n  onDelete,\r\n  showActions = true,\r\n  exerciseNumber,\r\n  subNumber\r\n}) => {\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const { state, toggleExerciseSelection, isExerciseInSuperset, startCreating } = useSupersets();\r\n  \r\n  const isInSuperset = isExerciseInSuperset(exercise.id || '');\r\n  const isSelected = state.selectedExercises.includes(exercise.id || '');\r\n  \r\n  // Close menu when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setShowMenu(false);\r\n      }\r\n    };\r\n\r\n    if (showMenu) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [showMenu]);\r\n\r\n  const handleSupersetToggle = () => {\r\n    if (exercise.id) {\r\n      toggleExerciseSelection(exercise.id);\r\n    }\r\n  };\r\n\r\n  // Calculate total volume for the exercise\r\n  const calculateTotalVolume = () => {\r\n    return exercise.sets.reduce((total, set) => total + (set.weight * set.reps), 0);\r\n  };\r\n\r\n  const cardClassName = `bg-[#1a1a1a] rounded-lg p-3 transition-all duration-200 ${\r\n    isInSuperset \r\n      ? 'bg-[#2196F3]/5' \r\n      : isSelected \r\n      ? 'bg-[#8B5CF6]/10 border-l-2 border-[#8B5CF6]' \r\n      : 'hover:bg-black/20'\r\n  }`;\r\n\r\n  return (\r\n    <div className={cardClassName}>\r\n      {/* Removed standalone superset label - now handled in DraggableExerciseDisplay */}\r\n\r\n      {/* Selection indicator during superset creation */}\r\n      {state.isCreating && (\r\n        <div className=\"flex items-center gap-2 mb-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isSelected}\r\n            onChange={handleSupersetToggle}\r\n            className=\"w-4 h-4 text-[#8B5CF6] bg-gray-100 border-gray-300 rounded focus:ring-[#8B5CF6] focus:ring-2\"\r\n          />\r\n          <span className=\"text-sm text-gray-400\">Select for superset</span>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-2\">\r\n          {/* Compact exercise number with optional sub-number */}\r\n          {exerciseNumber && (\r\n            <div className=\"flex items-center justify-center min-w-6 h-6 bg-[#8B5CF6] text-white text-xs font-bold rounded-full px-1.5\">\r\n              {exerciseNumber}{subNumber ? String.fromCharCode(96 + subNumber) : ''}\r\n            </div>\r\n          )}\r\n          <h3 className=\"text-base font-medium text-white\">{exercise.exerciseName}</h3>\r\n        </div>\r\n        {showActions && (\r\n          <div className=\"flex gap-2\">\r\n            {/* Unified superset button with different states */}\r\n            <button\r\n              onClick={() => {\r\n                if (isInSuperset) return; // Already in a superset\r\n                \r\n                if (!state.isCreating) {\r\n                  // Start superset creation mode\r\n                  startCreating();\r\n                  \r\n                  // Auto-select this exercise\r\n                  if (exercise.id) {\r\n                    setTimeout(() => {\r\n                      toggleExerciseSelection(exercise.id || '');\r\n                    }, 50);\r\n                  }\r\n                } else {\r\n                  // In creation mode - toggle selection\r\n                  handleSupersetToggle();\r\n                }\r\n              }}\r\n              className={`p-2 rounded-lg transition-colors ${\r\n                isInSuperset \r\n                  ? 'bg-[#2196F3] text-white' // Blue for existing superset\r\n                  : isSelected\r\n                    ? 'bg-[#8B5CF6] text-white' // Purple for selected\r\n                    : 'hover:bg-white/10 text-gray-400 hover:text-white'\r\n              }`}\r\n              aria-label={isInSuperset ? \"In superset\" : isSelected ? \"Selected for superset\" : \"Add to superset\"}\r\n            >\r\n              {isInSuperset ? (\r\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.1a3 3 0 004.24-4.24l-1.1-1.102z\" />\r\n                </svg>\r\n              ) : isSelected ? (\r\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                </svg>\r\n              ) : (\r\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                </svg>\r\n              )}\r\n            </button>\r\n            \r\n            {onEdit && (\r\n              <button \r\n                onClick={onEdit}\r\n                className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\r\n                aria-label=\"Edit exercise\"\r\n              >\r\n                <svg className=\"w-5 h-5 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                </svg>\r\n              </button>\r\n            )}\r\n            {onDelete && (\r\n              <button \r\n                onClick={onDelete}\r\n                className=\"p-2 hover:bg-white/10 rounded-lg transition-colors text-red-500\"\r\n                aria-label=\"Delete exercise\"\r\n              >\r\n                <svg className=\"w-5 h-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m4-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                </svg>\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"mt-3\">\r\n        {/* Check activity type first to determine display format */}\r\n        {exercise.activityType && exercise.activityType !== 'resistance' ? (\r\n          // Non-resistance activity - clean format like in screenshot\r\n          <div className=\"text-sm text-gray-300\">\r\n            {/* Activity type badge */}\r\n            <div className=\"flex items-center gap-2 mb-2\">\r\n              <span className=\"px-2 py-1 bg-blue-600/20 text-blue-300 text-xs rounded-full\">\r\n                {exercise.activityType.charAt(0).toUpperCase() + exercise.activityType.slice(1)} Activity\r\n              </span>\r\n            </div>\r\n            \r\n            {/* Display key metrics in the clean format */}\r\n            {exercise.sets && exercise.sets.length > 0 && (() => {\r\n              const set = exercise.sets[0] as any; // Use first set for display\r\n              \r\n              // Helper function to check if a value exists and is not empty\r\n              const hasValue = (value: any): boolean => {\r\n                return value !== null && \r\n                       value !== undefined && \r\n                       value !== '' && \r\n                       !(typeof value === 'string' && value.trim() === '') &&\r\n                       !(typeof value === 'number' && isNaN(value));\r\n                // Note: We don't exclude zero values as they might be legitimate (e.g., 0 calories)\r\n              };\r\n\r\n              return (\r\n                <div className=\"space-y-1\">\r\n                  {hasValue(set.duration) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Duration:</span>\r\n                      <span className=\"text-white\">{set.duration} min</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.distance) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Distance:</span>\r\n                      <span className=\"text-white\">{set.distance} m</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.calories) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Calories:</span>\r\n                      <span className=\"text-white\">{set.calories} kcal</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.heartRate) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Heart Rate:</span>\r\n                      <span className=\"text-white\">{set.heartRate} bpm</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.intensity) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Intensity:</span>\r\n                      <span className=\"text-white\">{set.intensity}/10</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.score) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Score:</span>\r\n                      <span className=\"text-white\">{set.score}</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.opponent) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Opponent:</span>\r\n                      <span className=\"text-white\">{set.opponent}</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.pace) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Pace:</span>\r\n                      <span className=\"text-white\">{set.pace}</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.holdTime) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Hold Time:</span>\r\n                      <span className=\"text-white\">{set.holdTime}s</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.rpe) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">RPE:</span>\r\n                      <span className=\"text-white\">{set.rpe}/10</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.restTime) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Rest Time:</span>\r\n                      <span className=\"text-white\">{set.restTime}s</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.stretchType) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Stretch Type:</span>\r\n                      <span className=\"text-white capitalize\">{set.stretchType}</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.bodyPart) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Body Part:</span>\r\n                      <span className=\"text-white\">{set.bodyPart}</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.flexibility) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Flexibility:</span>\r\n                      <span className=\"text-white\">{set.flexibility}/10</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.averageHeartRate) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Avg HR:</span>\r\n                      <span className=\"text-white\">{set.averageHeartRate} bpm</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.maxHeartRate) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Max HR:</span>\r\n                      <span className=\"text-white\">{set.maxHeartRate} bpm</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.elevation) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Elevation:</span>\r\n                      <span className=\"text-white\">{set.elevation} m</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.performance) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Performance:</span>\r\n                      <span className=\"text-white\">{set.performance}/10</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.hrZone1) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Zone 1:</span>\r\n                      <span className=\"text-white\">{set.hrZone1} min</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.hrZone2) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Zone 2:</span>\r\n                      <span className=\"text-white\">{set.hrZone2} min</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.hrZone3) && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">Zone 3:</span>\r\n                      <span className=\"text-white\">{set.hrZone3} min</span>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {hasValue(set.notes) && (\r\n                    <div className=\"mt-2 pt-2 border-t border-white/10\">\r\n                      <span className=\"text-gray-400 text-xs\">Notes: </span>\r\n                      <span className=\"text-white text-xs\">{set.notes}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })()}\r\n          </div>\r\n        ) : (\r\n          // Resistance exercise - show traditional sets display with additional fields\r\n          'sets' in exercise && exercise.sets ? (\r\n            <div className=\"text-sm\">\r\n              <div className=\"flex flex-wrap items-center mb-2\">\r\n                {exercise.sets.map((set: ExerciseSet, index: number) => (\r\n                  <div key={index} className=\"flex items-center\" style={{ marginRight: index === exercise.sets.length - 1 ? 0 : 8 }}>\r\n                    <span \r\n                      className=\"font-medium whitespace-nowrap\"\r\n                      style={{ color: getDifficultyColor(set.difficulty) }}\r\n                    >\r\n                      {set.weight}kg {set.reps}r\r\n                    </span>\r\n                    {index < exercise.sets.length - 1 && (\r\n                      <span className=\"text-gray-500 mx-1\">|</span>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* Show additional resistance exercise data if available */}\r\n              <div className=\"space-y-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-gray-400\">Total Volume</span>\r\n                  <span className=\"text-white\">{calculateTotalVolume()}kg</span>\r\n                </div>\r\n                \r\n                {/* Check for additional logged fields in resistance sets */}\r\n                {(() => {\r\n                  const hasValue = (value: any): boolean => {\r\n                    return value !== null && \r\n                           value !== undefined && \r\n                           value !== '' && \r\n                           !(typeof value === 'string' && value.trim() === '') &&\r\n                           !(typeof value === 'number' && isNaN(value));\r\n                  };\r\n\r\n                  const additionalFields: Array<{ label: string; value: string }> = [];\r\n                  \r\n                  // Check if any set has additional data\r\n                  exercise.sets.forEach((set: any) => {\r\n                    if (hasValue(set.rpe)) additionalFields.push({ label: 'RPE', value: `${set.rpe}/10` });\r\n                    if (hasValue(set.restTime)) additionalFields.push({ label: 'Rest Time', value: `${set.restTime}s` });\r\n                    if (hasValue(set.notes)) additionalFields.push({ label: 'Notes', value: set.notes });\r\n                  });\r\n\r\n                  // Remove duplicates and return unique fields\r\n                  const uniqueFields = additionalFields.filter((field, index, self) => \r\n                    index === self.findIndex(f => f.label === field.label)\r\n                  );\r\n\r\n                  return uniqueFields.map((field, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between\">\r\n                      <span className=\"text-gray-400\">{field.label}</span>\r\n                      <span className=\"text-white\">{field.value}</span>\r\n                    </div>\r\n                  ));\r\n                })()}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            // Fallback for other exercise types\r\n            <div className=\"text-sm text-gray-300\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-gray-400\">Type</span>\r\n                <span className=\"text-white capitalize\">{exercise.activityType || 'Exercise'}</span>\r\n              </div>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExerciseCard;\r\n","import { ExerciseData } from '@/services/exerciseDataService';\r\nimport { ActivityLog, ActivityType } from '@/types/activityTypes';\r\nimport { activityLoggingService } from '@/services/activityService';\r\nimport { getExerciseLogsByDate, deleteLocalExerciseLog } from '@/utils/localStorageUtils';\r\nimport { deleteExerciseLog } from '@/services/firebase/exerciseLogs';\r\nimport { ExerciseSet } from '@/types/sets';\r\n\r\n// Extended ExerciseData to support activity types\r\nexport interface UnifiedExerciseData extends ExerciseData {\r\n  activityType?: ActivityType;\r\n  activityData?: ActivityLog;\r\n}\r\n\r\n/**\r\n * Convert ActivityLog to ExerciseData format for unified display\r\n */\r\nfunction convertActivityLogToExerciseData(activityLog: ActivityLog): UnifiedExerciseData {\r\n  console.log('üîÑ Converting activity log:', {\r\n    activityType: activityLog.activityType,\r\n    activityName: activityLog.activityName,\r\n    rawLog: activityLog\r\n  });\r\n\r\n  const baseData: UnifiedExerciseData = {\r\n    id: activityLog.id,\r\n    exerciseName: activityLog.activityName,\r\n    timestamp: activityLog.timestamp,\r\n    userId: activityLog.userId,\r\n    sets: [],\r\n    // Add activity type indicator for UI\r\n    activityType: activityLog.activityType,\r\n    activityData: activityLog // Store original activity data\r\n  };\r\n\r\n  // Convert activity sessions to sets format for display\r\n  if (activityLog.activityType === ActivityType.RESISTANCE) {\r\n    // Already in the right format, this shouldn't happen but handle it\r\n    baseData.sets = (activityLog as any).sessions || [];\r\n  } else if (activityLog.activityType === ActivityType.SPORT) {\r\n    const sportLog = activityLog as any;\r\n    baseData.sets = sportLog.sessions?.map((session: any, index: number) => ({\r\n      setNumber: index + 1,\r\n      duration: session.duration,\r\n      distance: session.distance,\r\n      calories: session.calories,\r\n      intensity: session.intensity,\r\n      score: session.score,\r\n      notes: session.notes,\r\n      // Add other sport-specific fields\r\n      ...(session.opponent && { opponent: session.opponent }),\r\n      ...(session.performance && { performance: session.performance }),\r\n      ...(session.skills && { skills: session.skills })\r\n    } as ExerciseSet)) || [];\r\n  } else if (activityLog.activityType === ActivityType.STRETCHING) {\r\n    const stretchLog = activityLog as any;\r\n    // Handle both 'stretches' and 'sessions' field names for backward compatibility\r\n    const dataArray = stretchLog.stretches || stretchLog.sessions || [];\r\n    baseData.sets = dataArray.map((session: any, index: number) => ({\r\n      setNumber: index + 1,\r\n      duration: session.duration,\r\n      intensity: session.intensity,\r\n      notes: session.notes,\r\n      ...(session.holdTime && { holdTime: session.holdTime }),\r\n      ...(session.flexibility && { flexibility: session.flexibility }),\r\n      ...(session.stretchType && { stretchType: session.stretchType }),\r\n      ...(session.bodyPart && { bodyPart: session.bodyPart })\r\n    } as ExerciseSet)) || [];\r\n  } else if (activityLog.activityType === ActivityType.ENDURANCE) {\r\n    const enduranceLog = activityLog as any;\r\n    baseData.sets = enduranceLog.sessions?.map((session: any, index: number) => ({\r\n      setNumber: index + 1,\r\n      duration: session.duration,\r\n      ...(session.distance && { distance: session.distance }),\r\n      ...(session.pace && { pace: session.pace }),\r\n      ...(session.averageHeartRate && { averageHeartRate: session.averageHeartRate }),\r\n      ...(session.averageHR && { averageHeartRate: session.averageHR }), // Handle both field names\r\n      ...(session.maxHeartRate && { maxHeartRate: session.maxHeartRate }),\r\n      ...(session.maxHR && { maxHeartRate: session.maxHR }), // Handle both field names\r\n      ...(session.calories && { calories: session.calories }),\r\n      ...(session.elevation && { elevation: session.elevation }),\r\n      ...(session.rpe && { rpe: session.rpe }),\r\n      ...(session.hrZone1 && { hrZone1: session.hrZone1 }),\r\n      ...(session.hrZone2 && { hrZone2: session.hrZone2 }),\r\n      ...(session.hrZone3 && { hrZone3: session.hrZone3 }),\r\n      notes: session.notes\r\n    } as ExerciseSet)) || [];\r\n  } else if (activityLog.activityType === ActivityType.OTHER) {\r\n    const otherLog = activityLog as any;\r\n    // Other activities use 'customData' field\r\n    const dataArray = otherLog.customData || otherLog.sessions || [];\r\n    baseData.sets = dataArray.map((session: any, index: number) => ({\r\n      setNumber: index + 1,\r\n      duration: session.duration,\r\n      ...(session.calories && { calories: session.calories }),\r\n      ...(session.heartRate && { heartRate: session.heartRate }),\r\n      ...(session.intensity && { intensity: session.intensity }),\r\n      notes: session.notes,\r\n      // Include any custom values\r\n      ...(session.customValues && session.customValues),\r\n      // Include any additional fields\r\n      ...Object.keys(session).reduce((acc, key) => {\r\n        if (!['sessionNumber', 'duration', 'calories', 'heartRate', 'intensity', 'notes', 'customValues'].includes(key)) {\r\n          acc[key] = session[key];\r\n        }\r\n        return acc;\r\n      }, {} as any)\r\n    } as ExerciseSet)) || [];\r\n  }\r\n\r\n  console.log('‚úÖ Converted data result:', {\r\n    id: baseData.id,\r\n    exerciseName: baseData.exerciseName,\r\n    activityType: baseData.activityType,\r\n    sets: baseData.sets,\r\n    firstSet: baseData.sets[0]\r\n  });\r\n\r\n  return baseData;\r\n}\r\n\r\n/**\r\n * Get all exercises (resistance + activities) for a specific date\r\n */\r\nexport async function getAllExercisesByDate(\r\n  date: Date,\r\n  userId: string\r\n): Promise<UnifiedExerciseData[]> {\r\n  try {\r\n    // Get resistance training exercises (existing) - convert to proper format\r\n    const resistanceExerciseLogs = getExerciseLogsByDate(date);\r\n    const resistanceExercises: UnifiedExerciseData[] = resistanceExerciseLogs.map(log => ({\r\n      id: log.id,\r\n      exerciseName: log.exerciseName,\r\n      timestamp: log.timestamp || date,\r\n      userId: log.userId || userId,\r\n      sets: log.sets || [],\r\n      deviceId: log.deviceId,\r\n      activityType: ActivityType.RESISTANCE\r\n    }));\r\n\r\n    // Get activity logs for the same date\r\n    const startOfDay = new Date(date);\r\n    startOfDay.setHours(0, 0, 0, 0);\r\n    \r\n    const endOfDay = new Date(date);\r\n    endOfDay.setHours(23, 59, 59, 999);\r\n\r\n    const activityLogs = await activityLoggingService.getActivityLogs(\r\n      userId,\r\n      startOfDay,\r\n      endOfDay\r\n    );\r\n\r\n    // Convert activity logs to ExerciseData format\r\n    const activityExercises = activityLogs.map(convertActivityLogToExerciseData);\r\n\r\n    // Combine and sort by timestamp\r\n    const allExercises = [...resistanceExercises, ...activityExercises];\r\n    \r\n    return allExercises.sort((a, b) => {\r\n      const timeA = a.timestamp?.getTime() || 0;\r\n      const timeB = b.timestamp?.getTime() || 0;\r\n      return timeA - timeB;\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error getting all exercises by date:', error);\r\n    // Fallback to just resistance exercises\r\n    const resistanceExerciseLogs = getExerciseLogsByDate(date);\r\n    return resistanceExerciseLogs.map(log => ({\r\n      id: log.id,\r\n      exerciseName: log.exerciseName,\r\n      timestamp: log.timestamp || date,\r\n      userId: log.userId || userId,\r\n      sets: log.sets || [],\r\n      deviceId: log.deviceId,\r\n      activityType: ActivityType.RESISTANCE\r\n    }));\r\n  }\r\n}\r\n\r\n/**\r\n * Delete exercise (handles both resistance and activity types)\r\n */\r\nexport async function deleteExercise(exercise: UnifiedExerciseData, userId: string): Promise<boolean> {\r\n  try {\r\n    if (exercise.activityType && exercise.activityType !== ActivityType.RESISTANCE) {\r\n      // Delete activity log from localStorage\r\n      const logs: ActivityLog[] = JSON.parse(localStorage.getItem('activity-logs') || '[]');\r\n      const filteredLogs = logs.filter(log => \r\n        !(log.id === exercise.id && log.userId === userId)\r\n      );\r\n      localStorage.setItem('activity-logs', JSON.stringify(filteredLogs));\r\n      console.log('Activity log deleted:', exercise.id);\r\n      return true;\r\n    } else {\r\n      // Delete resistance exercise using existing Firebase function\r\n      if (exercise.id) {\r\n        await deleteExerciseLog(exercise.id, userId);\r\n        return true;\r\n      } else {\r\n        // If no ID, try to delete from local storage by exercise ID\r\n        deleteLocalExerciseLog(exercise.exerciseName);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting exercise:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Delete an activity log\r\n */\r\nexport async function deleteActivityLog(logId: string, userId: string): Promise<void> {\r\n  try {\r\n    await activityLoggingService.deleteActivityLog(logId, userId);\r\n    console.log('‚úÖ Activity log deleted successfully:', logId);\r\n  } catch (error) {\r\n    console.error('‚ùå Error deleting activity log:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if exercise is an activity (non-resistance) type\r\n */\r\nexport function isActivityExercise(exercise: UnifiedExerciseData): boolean {\r\n  return exercise.activityType ? exercise.activityType !== ActivityType.RESISTANCE : false;\r\n}\r\n\r\n/**\r\n * Get activity type display info\r\n */\r\nexport function getActivityTypeDisplay(activityType?: ActivityType) {\r\n  const displayMap = {\r\n    [ActivityType.RESISTANCE]: { emoji: 'üèãÔ∏è‚Äç‚ôÇÔ∏è', name: 'Resistance' },\r\n    [ActivityType.SPORT]: { emoji: '‚öΩ', name: 'Sports' },\r\n    [ActivityType.STRETCHING]: { emoji: 'üßò‚Äç‚ôÄÔ∏è', name: 'Stretching' },\r\n    [ActivityType.ENDURANCE]: { emoji: 'üèÉ‚Äç‚ôÇÔ∏è', name: 'Endurance' },\r\n    [ActivityType.OTHER]: { emoji: 'üéØ', name: 'Other' },\r\n    [ActivityType.SPEED_AGILITY]: { emoji: '‚ö°', name: 'Speed & Agility' }\r\n  };\r\n\r\n  return displayMap[activityType || ActivityType.RESISTANCE] || displayMap[ActivityType.RESISTANCE];\r\n}\r\n"],"names":["SupersetContext","createContext","useSupersets","context","useContext","STORAGE_KEY","EXERCISE_ORDER_KEY","getSupersetStorageKey","date","getExerciseOrderKey","loadSupersetsFromStorage","stored","error","saveSupersetsToStorage","supersets","saveExerciseOrderToStorage","exerciseIds","loadExerciseOrderFromStorage","SupersetProvider","children","state","setState","useState","currentDate","setCurrentDate","exerciseOrder","setExerciseOrder","loadSupersetsForDate","useCallback","storedSupersets","storedExerciseOrder","prev","saveSupersetsForDate","useEffect","updateExerciseOrder","startCreating","cancelCreating","toggleExerciseSelection","exerciseId","id","createSuperset","name","newSuperset","breakSuperset","supersetId","s","addSuperset","superset","removeSuperset","getSupersetByExercise","isExerciseInSuperset","removeExerciseFromSuperset","renameSuperset","newName","clearAll","value","jsx","addExerciseLog","logData","selectedDate","existingId","exerciseData","Timestamp","docRef","docId","doc","db","oldRef","getDoc","deleteDoc","collection","setDoc","firebaseError","deleteExerciseLog","logId","userId","exerciseRef","oldExerciseRef","exerciseDoc","oldExerciseDoc","_a","_b","deleted","errors","data","errorMessage","ActivityType","resistanceExercises","sportActivities","stretchingExercises","enduranceExercises","otherActivities","ActivityLoggingService","activityId","activityName","sets","timestamp","set","index","sessions","session","stretches","stretch","customData","logWithId","existingLogs","startDate","endDate","activityType","filteredLogs","log","activityLoggingService","getDifficultyColor","difficulty","ExerciseCard","exercise","onEdit","onDelete","showActions","exerciseNumber","subNumber","showMenu","setShowMenu","menuRef","useRef","isInSuperset","isSelected","handleClickOutside","event","handleSupersetToggle","calculateTotalVolume","total","cardClassName","jsxs","hasValue","additionalFields","field","self","f","convertActivityLogToExerciseData","activityLog","baseData","sportLog","stretchLog","dataArray","enduranceLog","otherLog","acc","key","getAllExercisesByDate","getExerciseLogsByDate","startOfDay","endOfDay","activityExercises","a","b","timeA","timeB","deleteExercise","deleteLocalExerciseLog","deleteActivityLog"],"mappings":"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"}