{"version":3,"file":"ExerciseSetLogger-CYZYj5aJ.js","sources":["../../src/features/exercises/ExerciseSetLogger.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport type { Exercise } from '@/types/exercise';\r\nimport type { ExerciseSet } from '@/types/sets';\r\nimport { SetEditorDialog } from '@/components/SetEditorDialog';\r\nimport { DifficultyCategory } from '@/types/difficulty';\r\n\r\ninterface ExerciseSetLoggerProps {\r\n  exercise: Partial<Exercise> & { \r\n    id: string; \r\n    name: string;\r\n    sets?: ExerciseSet[];\r\n  };\r\n  onSave: ((sets: ExerciseSet[], exerciseId: string) => void) | ((sets: ExerciseSet[]) => void);\r\n  onCancel: () => void;\r\n  isEditing?: boolean;\r\n  previousSet?: ExerciseSet; // Optional previous set for copying\r\n  showPreviousSets?: boolean; // Whether to show previous sets option\r\n  useExerciseId?: boolean; // Whether to pass exerciseId to onSave\r\n}\r\n\r\nexport const ExerciseSetLogger: React.FC<ExerciseSetLoggerProps> = ({\r\n  exercise,\r\n  onSave,\r\n  onCancel,\r\n  isEditing = false,\r\n  previousSet: externalPreviousSet,\r\n  showPreviousSets = true,\r\n  useExerciseId = false\r\n}) => {\r\n  const [sets, setSets] = useState<ExerciseSet[]>(() => {\r\n    if (isEditing && exercise.sets && exercise.sets.length > 0) {\r\n      return exercise.sets;\r\n    }\r\n    return [];\r\n  });\r\n  \r\n  const [isAddingSet, setIsAddingSet] = useState(!isEditing);\r\n  const [editingSetIndex, setEditingSetIndex] = useState<number | null>(null);\r\n\r\n  // Get the appropriate previous set based on context\r\n  const getPreviousSet = (currentIndex?: number): ExerciseSet | undefined => {\r\n    // If we're editing and have a valid index, use the previous set in sequence\r\n    if (typeof currentIndex === 'number' && currentIndex > 0) {\r\n      return sets[currentIndex - 1];\r\n    }\r\n    \r\n    // If we're adding a new set, use the last set\r\n    if (showPreviousSets) {\r\n      // First try the last set in the current exercise\r\n      if (sets.length > 0) {\r\n        return sets[sets.length - 1];\r\n      }\r\n      // If no sets in current exercise, use the externally provided previous set\r\n      return externalPreviousSet;\r\n    }\r\n    \r\n    return undefined;\r\n  };\r\n\r\n  // Debug logging for development\r\n  useEffect(() => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('ExerciseSetLogger state:', {\r\n        sets,\r\n        isEditing,\r\n        editingSetIndex,\r\n        externalPreviousSet,\r\n        showPreviousSets\r\n      });\r\n    }\r\n  }, [sets, isEditing, editingSetIndex, externalPreviousSet, showPreviousSets]);\r\n\r\n  const handleSetSave = (editedSet: ExerciseSet, index?: number) => {\r\n    if (typeof index === 'number') {\r\n      setSets(sets.map((s, i) => i === index ? editedSet : s));\r\n      setEditingSetIndex(null);\r\n    } else {\r\n      setSets([...sets, editedSet]);\r\n    }\r\n    setIsAddingSet(false);\r\n  };\r\n\r\n  const handleSetDelete = (index: number) => {\r\n    setSets(sets.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleSaveAndClose = () => {\r\n    if (sets.length === 0) {\r\n      onCancel();\r\n      return;\r\n    }\r\n    \r\n    if (useExerciseId) {\r\n      (onSave as (sets: ExerciseSet[], exerciseId: string) => void)(sets, exercise.id);\r\n    } else {\r\n      (onSave as (sets: ExerciseSet[]) => void)(sets);\r\n    }\r\n  };\r\n\r\n  const renderSetSummary = (set: ExerciseSet, index: number) => (\r\n    <div \r\n      key={index}\r\n      className=\"flex items-center justify-between p-4 bg-[#2a2a2a] rounded-lg mb-2 cursor-pointer hover:bg-[#3a3a3a]\"\r\n      onClick={() => setEditingSetIndex(index)}\r\n    >\r\n      <div className=\"flex items-center space-x-4\">\r\n        <span className=\"text-gray-400\">Set {index + 1}</span>\r\n        <span className=\"text-white font-medium\">{set.weight}kg Ã— {set.reps}</span>\r\n      </div>\r\n      <div className=\"flex items-center space-x-2\">\r\n        <span className={`px-3 py-1 rounded text-sm ${\r\n          set.difficulty === DifficultyCategory.WARMUP ? 'bg-gray-600' :\r\n          set.difficulty === DifficultyCategory.EASY ? 'bg-green-600' :\r\n          set.difficulty === DifficultyCategory.NORMAL ? 'bg-blue-600' :\r\n          set.difficulty === DifficultyCategory.HARD ? 'bg-red-600' :\r\n          set.difficulty === DifficultyCategory.DROP ? 'bg-purple-600' :\r\n          'bg-gray-600'\r\n        }`}>\r\n          {set.difficulty}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full bg-[#1a1a1a]\">\r\n      <div className=\"flex-1 p-4\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h2 className=\"text-xl font-bold text-white\">{exercise.name}</h2>\r\n          <span className=\"text-gray-400\">{sets.length} sets</span>\r\n        </div>\r\n\r\n        {sets.map((set, index) => renderSetSummary(set, index))}\r\n\r\n        {/* Set Editor Dialog */}\r\n        {(isAddingSet || editingSetIndex !== null) && (\r\n          <SetEditorDialog\r\n            onSave={(editedSet) => handleSetSave(editedSet, editingSetIndex ?? undefined)}\r\n            onClose={() => {\r\n              setIsAddingSet(false);\r\n              setEditingSetIndex(null);\r\n            }}\r\n            initialSet={editingSetIndex !== null ? sets[editingSetIndex] : undefined}\r\n            previousSet={getPreviousSet(editingSetIndex ?? undefined)}\r\n            exerciseName={exercise.name}\r\n            setNumber={(editingSetIndex !== null ? editingSetIndex : sets.length) + 1}\r\n            totalSets={editingSetIndex !== null ? sets.length : sets.length + 1}\r\n            onDelete={editingSetIndex !== null ? () => handleSetDelete(editingSetIndex) : undefined}\r\n          />\r\n        )}\r\n\r\n        {/* Add Set Button */}\r\n        {!isAddingSet && editingSetIndex === null && (\r\n          <button\r\n            onClick={() => setIsAddingSet(true)}\r\n            className=\"w-full py-4 mt-4 rounded-lg bg-white/5 hover:bg-white/10 text-white font-medium transition-colors\"\r\n          >\r\n            Add Set\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Bottom Actions */}\r\n      <div className=\"p-4 border-t border-white/10\">\r\n        <div className=\"flex gap-4\">\r\n          <button\r\n            onClick={handleSaveAndClose}\r\n            className=\"flex-1 py-3 rounded-lg bg-[#8B5CF6] text-white font-medium hover:bg-[#7C3AED] transition-colors\"\r\n          >\r\n            Save\r\n          </button>\r\n          <button\r\n            onClick={onCancel}\r\n            className=\"flex-1 py-3 rounded-lg bg-white/5 text-white font-medium hover:bg-white/10 transition-colors\"\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["ExerciseSetLogger","exercise","onSave","onCancel","isEditing","externalPreviousSet","showPreviousSets","useExerciseId","sets","setSets","useState","isAddingSet","setIsAddingSet","editingSetIndex","setEditingSetIndex","getPreviousSet","currentIndex","useEffect","handleSetSave","editedSet","index","s","i","handleSetDelete","_","handleSaveAndClose","renderSetSummary","set","jsxs","DifficultyCategory","jsx","SetEditorDialog"],"mappings":"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"}