{"version":3,"file":"localStorageUtils-B-xqxCNH.js","sources":["../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/utils/localStorageUtils.ts"],"sourcesContent":["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import { auth, db } from '@/services/firebase/config';\r\nimport { doc, deleteDoc, getDoc } from 'firebase/firestore';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ExerciseLog } from '@/types/exercise';\r\n\r\n// Constants\r\nconst LOGS_STORAGE_KEY = 'exercise_logs';\r\n\r\n// Helper to get date range\r\nconst getDateRange = (date: Date) => {\r\n  const startOfDay = new Date(date);\r\n  startOfDay.setHours(0, 0, 0, 0);\r\n  \r\n  const endOfDay = new Date(date);\r\n  endOfDay.setHours(23, 59, 59, 999);\r\n  \r\n  return { startOfDay, endOfDay };\r\n};\r\n\r\n// Get or create a persistent device ID\r\nexport const getDeviceId = (): string => {\r\n  let deviceId = localStorage.getItem('device_id');\r\n  \r\n  if (!deviceId) {\r\n    deviceId = uuidv4();\r\n    localStorage.setItem('device_id', deviceId);\r\n  }\r\n  \r\n  return deviceId;\r\n};\r\n\r\n// Get all exercise logs from local storage\r\nexport const getExerciseLogs = (): ExerciseLog[] => {\r\n  const logsString = localStorage.getItem(LOGS_STORAGE_KEY);\r\n  if (!logsString) return [];\r\n\r\n  try {\r\n    const logs = JSON.parse(logsString);\r\n    return Array.isArray(logs) ? logs.map(log => ({\r\n      ...log,\r\n      timestamp: new Date(log.timestamp)\r\n    })) : [];\r\n  } catch (error) {\r\n    console.error('Error parsing exercise logs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get exercise logs for a specific date\r\nexport const getExerciseLogsByDate = (date: Date): ExerciseLog[] => {\r\n  const exerciseLogs = getExerciseLogs();\r\n  const { startOfDay, endOfDay } = getDateRange(date);\r\n\r\n  return exerciseLogs.filter(log => {\r\n    const logDate = new Date(log.timestamp);\r\n    return logDate >= startOfDay && logDate <= endOfDay;\r\n  });\r\n};\r\n\r\n// Save exercise log to local storage\r\nexport const saveExerciseLog = (exerciseLog: ExerciseLog): ExerciseLog => {\r\n  const logs = getExerciseLogs();\r\n  \r\n  // Ensure the log has a unique ID\r\n  const newLog = {\r\n    ...exerciseLog,\r\n    id: exerciseLog.id || uuidv4(),\r\n    deviceId: exerciseLog.deviceId || getDeviceId(),\r\n    timestamp: exerciseLog.timestamp || new Date(),\r\n    userId: auth.currentUser?.uid || 'anonymous'  // Fallback to anonymous if not authenticated\r\n  };\r\n\r\n  // Convert Date to string for storage\r\n  const storableLog = {\r\n    ...newLog,\r\n    timestamp: newLog.timestamp instanceof Date \r\n      ? newLog.timestamp.toISOString() \r\n      : new Date(newLog.timestamp).toISOString()\r\n  };\r\n\r\n  // If the log has an ID, update the existing log instead of adding a new one\r\n  const existingLogIndex = logs.findIndex(l => l.id === exerciseLog.id);\r\n  let storableLogs;\r\n  \r\n  if (existingLogIndex !== -1) {\r\n    // Update existing log\r\n    storableLogs = [\r\n      ...logs.slice(0, existingLogIndex),\r\n      storableLog,\r\n      ...logs.slice(existingLogIndex + 1)\r\n    ];\r\n  } else {\r\n    // Add new log\r\n    storableLogs = [...logs, storableLog];\r\n  }\r\n  \r\n  localStorage.setItem(LOGS_STORAGE_KEY, JSON.stringify(storableLogs));\r\n  return newLog;\r\n};\r\n\r\n// Delete an exercise log\r\nexport const deleteExerciseLog = async (log: ExerciseLog): Promise<boolean> => {\r\n  try {\r\n    // First try to delete from Firestore if we have an ID\r\n    if (log.id && auth.currentUser) {\r\n      const docRef = doc(db, 'exerciseLogs', log.id);\r\n      const docSnap = await getDoc(docRef);\r\n      \r\n      if (docSnap.exists()) {\r\n        await deleteDoc(docRef);\r\n      }\r\n    }\r\n    \r\n    // Then delete from local storage\r\n    const logs = getExerciseLogs();\r\n    const filteredLogs = logs.filter(l => l.id !== log.id);\r\n    \r\n    if (filteredLogs.length === logs.length) {\r\n      return false; // Log wasn't found\r\n    }\r\n    \r\n    localStorage.setItem(LOGS_STORAGE_KEY, JSON.stringify(filteredLogs));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting exercise log:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Delete exercise log from local storage\r\nexport const deleteLocalExerciseLog = (exerciseId: string) => {\r\n  let exerciseLogs = getExerciseLogs();\r\n  const updatedLogs = exerciseLogs.filter(log => log.id !== exerciseId);\r\n  localStorage.setItem(LOGS_STORAGE_KEY, JSON.stringify(updatedLogs));\r\n};\r\n\r\n// Save all exercise logs to local storage (bulk save)\r\nexport const saveAllExerciseLogs = (logs: ExerciseLog[]): void => {\r\n  try {\r\n    localStorage.setItem(LOGS_STORAGE_KEY, JSON.stringify(logs));\r\n    console.log(`✅ Saved ${logs.length} exercise logs to local storage`);\r\n  } catch (error) {\r\n    console.error('❌ Error saving exercise logs to local storage:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Clear all exercise logs from local storage\r\nexport const clearExerciseLogs = () => {\r\n  localStorage.removeItem(LOGS_STORAGE_KEY);\r\n};\r\n\r\n// Import exercise logs from JSON\r\nexport const importExerciseLogs = (jsonData: string): boolean => {\r\n  try {\r\n    const importedLogs = JSON.parse(jsonData);\r\n    \r\n    if (!Array.isArray(importedLogs)) {\r\n      throw new Error('Imported data is not an array');\r\n    }\r\n    \r\n    // Convert string timestamps to Date objects\r\n    const processedLogs = importedLogs.map((log: any) => ({\r\n      ...log,\r\n      timestamp: log.timestamp ? new Date(log.timestamp) : new Date(),\r\n      deviceId: log.deviceId || getDeviceId(),\r\n      id: log.id || uuidv4()\r\n    }));\r\n    \r\n    // Store the imported logs\r\n    const storableLogs = processedLogs.map((log: ExerciseLog) => ({\r\n      ...log,\r\n      timestamp: log.timestamp instanceof Date \r\n        ? log.timestamp.toISOString() \r\n        : new Date(log.timestamp).toISOString()\r\n    }));\r\n    \r\n    localStorage.setItem(LOGS_STORAGE_KEY, JSON.stringify(storableLogs));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error importing logs:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"names":["byteToHex","i","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native","v4","options","buf","rnds","_a","LOGS_STORAGE_KEY","getDateRange","date","startOfDay","endOfDay","getDeviceId","deviceId","uuidv4","getExerciseLogs","logsString","logs","log","error","getExerciseLogsByDate","exerciseLogs","logDate","saveExerciseLog","exerciseLog","newLog","auth","storableLog","existingLogIndex","storableLogs","deleteLocalExerciseLog","exerciseId","updatedLogs"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}