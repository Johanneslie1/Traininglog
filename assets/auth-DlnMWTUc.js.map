{"version":3,"file":"auth-DlnMWTUc.js","sources":["../../node_modules/react-redux/es/hooks/useStore.js","../../node_modules/react-redux/es/hooks/useDispatch.js","../../src/services/firebase/auth.ts"],"sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext, createReduxContextHook } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook(context = ReactReduxContext) {\n  const useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore() {\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();","import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context = ReactReduxContext) {\n  const useStore = // @ts-ignore\n  context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    const store = useStore(); // @ts-ignore\n\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport const useDispatch = /*#__PURE__*/createDispatchHook();","import { \r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc, Timestamp } from 'firebase/firestore';\r\nimport { auth, db } from './config';\r\n\r\n// Log the current origin - useful for debugging GitHub Pages\r\nconsole.log('Auth service initialized with origin:', window.location.origin);\r\n\r\nlet authInitialized = false;\r\n\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  role: 'athlete' | 'coach';\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface RegisterData {\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  role: 'athlete' | 'coach';\r\n}\r\n\r\n// Add a function to wait for auth to be ready\r\nexport const waitForAuth = (): Promise<void> => {\r\n  return new Promise((resolve) => {\r\n    const unsubscribe = onAuthStateChanged(auth, () => {\r\n      unsubscribe();\r\n      resolve();\r\n    });\r\n  });\r\n}\r\n\r\nexport interface LoginData {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Helper function to convert Timestamp to Date\r\nconst convertTimestamps = (data: any): User => {\r\n  return {\r\n    ...data,\r\n    createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate() : data.createdAt,\r\n    updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate() : data.updatedAt\r\n  };\r\n};\r\n\r\nexport const registerUser = async (data: RegisterData): Promise<User> => {\r\n  const { email, password, firstName, lastName, role } = data;\r\n  \r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const { uid } = userCredential.user;\r\n\r\n    const now = Timestamp.now();\r\n    const userData = {\r\n      id: uid,\r\n      email,\r\n      firstName,\r\n      lastName,\r\n      role,\r\n      createdAt: now,\r\n      updatedAt: now\r\n    };\r\n\r\n    // Store additional user data in Firestore\r\n    await setDoc(doc(db, 'users', uid), userData);\r\n\r\n    return convertTimestamps(userData);\r\n  } catch (error: any) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const loginUser = async (data: LoginData): Promise<User> => {\r\n  const { email, password } = data;\r\n\r\n  try {\r\n    console.log('Attempting to sign in with email:', email);\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const { uid } = userCredential.user;\r\n    console.log('Sign in successful, fetching user data for uid:', uid);\r\n\r\n    // Get additional user data from Firestore\r\n    const userDoc = await getDoc(doc(db, 'users', uid));\r\n    if (!userDoc.exists()) {\r\n      console.error('User document not found in Firestore after login');\r\n      throw new Error('User data not found');\r\n    }\r\n    console.log('User data retrieved from Firestore');\r\n\r\n    return convertTimestamps(userDoc.data() as User);\r\n  } catch (error: any) {\r\n    console.error('Login error:', error);\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const logoutUser = async (): Promise<void> => {\r\n  try {\r\n    await signOut(auth);\r\n  } catch (error: any) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const initializeAuth = (): Promise<void> => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const unsubscribe = onAuthStateChanged(auth, () => {\r\n        authInitialized = true;\r\n        unsubscribe();\r\n        resolve();\r\n      }, (error) => {\r\n        console.error('Auth initialization error:', error);\r\n        reject(error);\r\n      });\r\n    } catch (error) {\r\n      console.error('Auth setup error:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const getCurrentUser = async (): Promise<User | null> => {\r\n  try {\r\n    if (!authInitialized) {\r\n      await initializeAuth();\r\n    }\r\n    \r\n    const firebaseUser = auth.currentUser;\r\n    if (!firebaseUser) {\r\n      console.log('No current user found');\r\n      return null;\r\n    }\r\n\r\n    console.log('Fetching user data for:', firebaseUser.uid);\r\n    const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\r\n    \r\n    if (!userDoc.exists()) {\r\n      console.warn('User document not found in Firestore');\r\n      // Sign out the user if their document doesn't exist\r\n      await signOut(auth);\r\n      return null;\r\n    }\r\n\r\n    const userData = userDoc.data();\r\n    console.log('User data retrieved successfully');\r\n    \r\n    return {\r\n      id: firebaseUser.uid,\r\n      email: userData.email || firebaseUser.email || '',\r\n      firstName: userData.firstName || '',\r\n      lastName: userData.lastName || '',\r\n      role: userData.role || 'athlete',\r\n      createdAt: userData.createdAt?.toDate() || new Date(),\r\n      updatedAt: userData.updatedAt?.toDate() || new Date()\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting user data:', error);\r\n    // Don't throw, return null to allow the app to handle the error gracefully\r\n    return null;\r\n  }\r\n};\r\n"],"names":["createStoreHook","context","ReactReduxContext","useReduxContext","useDefaultReduxContext","createReduxContextHook","store","useStore","createDispatchHook","useDefaultStore","useDispatch","authInitialized","convertTimestamps","data","Timestamp","registerUser","email","password","firstName","lastName","role","userCredential","createUserWithEmailAndPassword","auth","uid","now","userData","setDoc","doc","db","error","loginUser","signInWithEmailAndPassword","userDoc","getDoc","initializeAuth","resolve","reject","unsubscribe","onAuthStateChanged","getCurrentUser","firebaseUser","signOut","_a","_b"],"mappings":"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","x_google_ignoreList":[0,1]}