{"version":3,"file":"speedAgilityFilters-CRyYMho7.js","sources":["../../src/utils/speedAgilityFilters.ts"],"sourcesContent":["// Utility functions for Speed, Agility & Plyometrics exercise filtering\r\n// Derived from speedAgility.json structure\r\n// PROMPT BOOSTER: Implements tag derivation and multi-facet filtering (type, lateralization, equipment, semantic tags, muscle groups)\r\n\r\nexport interface SpeedAgilityExercise {\r\n  id: string;\r\n  name: string;\r\n  category: string; // e.g., full-body, legs, upper-body\r\n  type: string; // sprint | agility | plyometric\r\n  lateralization: string; // unilateral | bilateral\r\n  equipment: string; // bodyweight | box | cones | ladder | hurdle | other | dumbbell\r\n  muscleGroups: string[];\r\n  instructions: string;\r\n  tags?: string[];\r\n}\r\n\r\n// Patterns to infer semantic tags from exercise names\r\nconst NAME_TAG_RULES: Array<[RegExp, string]> = [\r\n  [/jump/i, 'jump'],\r\n  [/sprint/i, 'sprint'],\r\n  [/skip/i, 'skip'],\r\n  [/bound/i, 'bound'],\r\n  [/shuffle/i, 'shuffle'],\r\n  [/hurdle/i, 'hurdle'],\r\n  [/ladder/i, 'ladder'],\r\n  [/sled/i, 'sled'],\r\n  [/reaction|reactive/i, 'reaction'],\r\n  [/start/i, 'start'],\r\n  [/accel|flying|build-up|build up|ins and outs|rolling/i, 'acceleration'],\r\n  [/decel|stop/i, 'deceleration'],\r\n  [/crossover/i, 'crossover'],\r\n  [/parachute/i, 'parachute'],\r\n  [/box/i, 'box'],\r\n  [/medicine ball|med ball|ball slam|chest pass/i, 'medicine-ball'],\r\n  [/figure 8|figure-8/i, 'figure-8'],\r\n  [/hexagon|hex/i, 'hex'],\r\n  [/wicket/i, 'wicket'],\r\n  [/mirror/i, 'mirror'],\r\n  [/assisted/i, 'assisted'],\r\n  [/resisted|resisted sprint|partner-resisted/i, 'resisted'],\r\n  [/depth/i, 'depth'],\r\n  [/tuck/i, 'tuck'],\r\n  [/pogo/i, 'pogo'],\r\n  [/ankle|ankling/i, 'ankle'],\r\n];\r\n\r\nfunction norm(str: string) {\r\n  return str.toLowerCase().replace(/\\s+/g, '-');\r\n}\r\n\r\nexport function deriveTags(e: SpeedAgilityExercise): string[] {\r\n  const tags = new Set<string>();\r\n\r\n  // Base structural facets\r\n  tags.add(norm(e.type)); // sprint | agility | plyometric\r\n  tags.add(norm(e.lateralization)); // unilateral | bilateral\r\n  tags.add(norm(e.category));\r\n  tags.add('speed-agility-plyometrics');\r\n\r\n  // Equipment normalization\r\n  const equipNorm = norm(e.equipment);\r\n  tags.add(equipNorm);\r\n\r\n  // Name based tags\r\n  NAME_TAG_RULES.forEach(([re, t]) => { if (re.test(e.name)) tags.add(t); });\r\n\r\n  // Semantic grouping\r\n  if (tags.has('jump')) {\r\n    tags.add('power');\r\n    if (e.lateralization === 'unilateral') tags.add('unilateral-jump');\r\n    if (e.lateralization === 'bilateral') tags.add('bilateral-jump');\r\n  }\r\n  if (['plyometric', 'sprint'].some(t => tags.has(t))) tags.add('explosive');\r\n  if (/resisted|sled|parachute|band/.test(e.name.toLowerCase())) tags.add('resisted');\r\n  if (/assisted|downhill/.test(e.name.toLowerCase())) tags.add('assisted');\r\n  if (/reaction|mirror|ball drop/.test(e.name.toLowerCase())) tags.add('reaction');\r\n  if (/accel|start|flying|build-up|rolling|ins and outs/i.test(e.name)) tags.add('acceleration');\r\n\r\n  return Array.from(tags);\r\n}\r\n\r\nexport interface FilterState {\r\n  search?: string;\r\n  includeTags?: Set<string>;\r\n  excludeTags?: Set<string>;\r\n  equipment?: Set<string>;\r\n  muscleGroups?: Set<string>;\r\n  lateralization?: Set<string>;\r\n  type?: Set<string>;\r\n}\r\n\r\nexport function enrich(list: SpeedAgilityExercise[]): SpeedAgilityExercise[] {\r\n  return list.map(e => ({ ...e, tags: deriveTags(e) }));\r\n}\r\n\r\nexport function applyFilters(list: SpeedAgilityExercise[], f: FilterState): SpeedAgilityExercise[] {\r\n  return list.filter(e => {\r\n    if (f.search) {\r\n      const q = f.search.toLowerCase();\r\n      if (!(e.name.toLowerCase().includes(q) || e.instructions.toLowerCase().includes(q))) return false;\r\n    }\r\n    if (f.type && f.type.size && !f.type.has(norm(e.type))) return false;\r\n    if (f.lateralization && f.lateralization.size && !f.lateralization.has(norm(e.lateralization))) return false;\r\n    if (f.equipment && f.equipment.size && !f.equipment.has(norm(e.equipment))) return false;\r\n    if (f.muscleGroups && f.muscleGroups.size && !e.muscleGroups.some(m => f.muscleGroups!.has(norm(m)))) return false;\r\n    if (f.includeTags && f.includeTags.size && !e.tags!.some(t => f.includeTags!.has(t))) return false;\r\n    if (f.excludeTags && e.tags!.some(t => f.excludeTags!.has(t))) return false;\r\n    return true;\r\n  });\r\n}\r\n\r\nexport function collectFacets(list: SpeedAgilityExercise[]) {\r\n  const facets = {\r\n    type: new Set<string>(),\r\n    lateralization: new Set<string>(),\r\n    equipment: new Set<string>(),\r\n    muscleGroups: new Set<string>(),\r\n    tags: new Set<string>()\r\n  };\r\n  list.forEach(e => {\r\n    facets.type.add(norm(e.type));\r\n    facets.lateralization.add(norm(e.lateralization));\r\n    facets.equipment.add(norm(e.equipment));\r\n    e.muscleGroups.forEach(m => facets.muscleGroups.add(norm(m)));\r\n    e.tags?.forEach(t => facets.tags.add(t));\r\n  });\r\n  return facets;\r\n}\r\n"],"names":["NAME_TAG_RULES","norm","str","deriveTags","e","tags","equipNorm","re","t","enrich","list","applyFilters","f","q","m","collectFacets","facets","_a"],"mappings":"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"}