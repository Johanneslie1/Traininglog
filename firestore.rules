// This file won't be automatically deployed, but it shows the recommended Firestore rules
// You'll need to copy these to your Firebase console if your access is being denied
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Global exercises collection
    match /exercises/{exerciseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
      
      // Nested exercises collection under users - CRUD permissions
      match /exercises/{exerciseId} {
        // Allow read if authenticated and owns either parent or document
        allow read: if isAuthenticated() && (
          isOwner(userId) || 
          (resource != null && resource.data.userId == request.auth.uid)
        );
        
        // Allow create if authenticated and document belongs to user
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        
        // Allow update if authenticated and user owns the document
        allow update: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid &&
          (resource == null || resource.data.userId == request.auth.uid);

        // Allow delete if authenticated and user owns the document
        allow delete: if isAuthenticated() &&
          (resource == null || resource.data.userId == request.auth.uid);
      }

      // Nested exerciseLogs collection under users
      match /exerciseLogs/{logId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() && isOwner(userId) && resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && isOwner(userId) && resource.data.userId == request.auth.uid;
      }
    }

    // Top-level exerciseLogs collection (if still in use)
    match /exerciseLogs/{logId} {
      // Allow read if authenticated and owns the document
      allow read: if isAuthenticated() && (
        resource == null || 
        resource.data.userId == request.auth.uid
      );
      
      // Allow create if authenticated and setting correct userId
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow update/delete if authenticated and owns the document
      allow update, delete: if isAuthenticated() && 
        resource != null && 
        resource.data.userId == request.auth.uid;
    }

    match /programs/{programId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;

      match /sessions/{sessionId} {
        // Allow read if user owns the session or the parent program exists and user owns it
        allow read: if isAuthenticated() && (
          (resource != null && resource.data.userId == request.auth.uid) ||
          (exists(/databases/$(database)/documents/programs/$(programId)) && 
           get(/databases/$(database)/documents/programs/$(programId)).data.userId == request.auth.uid)
        );
        
        // Allow create with correct ownership - simplified check
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        
        // Allow updates when user owns the session
        allow update: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
        
        // Allow delete if user owns the session
        allow delete: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
      }
    }

    // Temporary test collection for debugging (remove in production)
    match /test/{testId} {
      allow read, write: if isAuthenticated();
    }
  }
}
